{"ast":null,"code":"function isTypeNumber(value) {\n  return value !== undefined && value !== null && typeof value === \"number\";\n}\n\nfunction isTypeBoolean(value) {\n  return value && typeof value === \"boolean\";\n}\n\nfunction toBoolean(value) {\n  if (value === \"true\") return true;\n  if (value === \"false\") return false;\n  throw \"Invalid type parsed as Boolean value\";\n}\n/* Encoder for qs library which preserve number types on the URL. Numbers\nare padded with \"n_{number}_n\", and booleans with \"b_{boolean}_b\"*/\n\n\nexport default {\n  encode: function encode(value, _encode) {\n    if (isTypeNumber(value)) {\n      return \"n_\".concat(value, \"_n\");\n    }\n\n    if (isTypeBoolean(value)) {\n      return \"b_\".concat(value, \"_b\");\n    }\n\n    return _encode(value);\n  },\n  decode: function decode(value, _decode) {\n    //eslint-disable-next-line\n    if (/n_-?[\\d\\.]*_n/.test(value)) {\n      var numericValueString = value.substring(2, value.length - 2);\n      return Number(numericValueString);\n    }\n\n    if (/^b_(true|false)*_b$/.test(value)) {\n      var booleanValueString = value.substring(2, value.length - 2);\n      return toBoolean(booleanValueString);\n    }\n\n    return _decode(value);\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,SAAOA,KAAK,KAAKC,SAAVD,IAAuBA,KAAK,KAAK,IAAjCA,IAAyC,OAAOA,KAAP,KAAiB,QAAjE;AACD;;AAED,SAASE,aAAT,CAAuBF,KAAvB,EAA8B;AAC5B,SAAOA,KAAK,IAAI,OAAOA,KAAP,KAAiB,SAAjC;AACD;;AAED,SAASG,SAAT,CAAmBH,KAAnB,EAA0B;AACxB,MAAIA,KAAK,KAAK,MAAd,EAAsB,OAAO,IAAP;AACtB,MAAIA,KAAK,KAAK,OAAd,EAAuB,OAAO,KAAP;AACvB,QAAM,sCAAN;AACD;AAED;AACA;;;AAEA,eAAe;AACbI,QADa,kBACNJ,KADM,EACCI,OADD,EACS;AACpB,QAAIL,YAAY,CAACC,KAAD,CAAhB,EAAyB;AACvB,yBAAYA,KAAZ;AACD;;AACD,QAAIE,aAAa,CAACF,KAAD,CAAjB,EAA0B;AACxB,yBAAYA,KAAZ;AACD;;AACD,WAAOI,OAAM,CAACJ,KAAD,CAAb;AARW;AAUbK,QAVa,kBAUNL,KAVM,EAUCK,OAVD,EAUS;AACpB;AACA,QAAI,gBAAgBC,IAAhB,CAAqBN,KAArB,CAAJ,EAAiC;AAC/B,UAAMO,kBAAkB,GAAGP,KAAK,CAACQ,SAANR,CAAgB,CAAhBA,EAAmBA,KAAK,CAACS,MAANT,GAAe,CAAlCA,CAA3B;AACA,aAAOU,MAAM,CAACH,kBAAD,CAAb;AACD;;AACD,QAAI,sBAAsBD,IAAtB,CAA2BN,KAA3B,CAAJ,EAAuC;AACrC,UAAMW,kBAAkB,GAAGX,KAAK,CAACQ,SAANR,CAAgB,CAAhBA,EAAmBA,KAAK,CAACS,MAANT,GAAe,CAAlCA,CAA3B;AACA,aAAOG,SAAS,CAACQ,kBAAD,CAAhB;AACD;;AACD,WAAON,OAAM,CAACL,KAAD,CAAb;AACD;AArBY,CAAf","names":["isTypeNumber","value","undefined","isTypeBoolean","toBoolean","encode","decode","test","numericValueString","substring","length","Number","booleanValueString"],"sources":["/Users/karina/Main/Study/Web Dev/elasticsearch-api-test/node_modules/@elastic/search-ui/src/preserveTypesEncoder.js"],"sourcesContent":["function isTypeNumber(value) {\n  return value !== undefined && value !== null && typeof value === \"number\";\n}\n\nfunction isTypeBoolean(value) {\n  return value && typeof value === \"boolean\";\n}\n\nfunction toBoolean(value) {\n  if (value === \"true\") return true;\n  if (value === \"false\") return false;\n  throw \"Invalid type parsed as Boolean value\";\n}\n\n/* Encoder for qs library which preserve number types on the URL. Numbers\nare padded with \"n_{number}_n\", and booleans with \"b_{boolean}_b\"*/\n\nexport default {\n  encode(value, encode) {\n    if (isTypeNumber(value)) {\n      return `n_${value}_n`;\n    }\n    if (isTypeBoolean(value)) {\n      return `b_${value}_b`;\n    }\n    return encode(value);\n  },\n  decode(value, decode) {\n    //eslint-disable-next-line\n    if (/n_-?[\\d\\.]*_n/.test(value)) {\n      const numericValueString = value.substring(2, value.length - 2);\n      return Number(numericValueString);\n    }\n    if (/^b_(true|false)*_b$/.test(value)) {\n      const booleanValueString = value.substring(2, value.length - 2);\n      return toBoolean(booleanValueString);\n    }\n    return decode(value);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}