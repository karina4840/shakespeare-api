{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport React from \"react\";\nimport SearchContext from \"./SearchContext\";\n\nfunction buildContextForProps(context) {\n  return _objectSpread(_objectSpread({}, context.driver.getState()), context.driver.getActions());\n}\n/* For a given object execute mapContextToProps to pluck out the relevant\nproperties */\n\n\nfunction giveMeJustWhatINeeded(stateOrContext, mapContextToProps, props) {\n  var mapContextToPropsToUse = props.mapContextToProps || mapContextToProps;\n  return mapContextToPropsToUse(stateOrContext, props) || {};\n}\n/**\n * This is a Higher Order Component that wraps a component and injects state and actions from Search UI, effectively\n * \"connecting\" it to Search UI.\n *\n * Components using `withSearch` will be \"Pure\" components.\n * It is important to understand the implications of using a PureComponent, as described here:\n * https://reactjs.org/docs/optimizing-performance.html#examples\n *\n * @param Function mapContextToProps A function that accepts the context and allows you to pick the values to be passed as props\n * into the component. This allows you to \"select\" which values from the context to use.\n * @param Function Component\n */\n\n\nexport default function withSearch(mapContextToProps) {\n  if (!mapContextToProps) {\n    throw \"withSearch requires a function to be provided which returns an object with at least one value.\";\n  }\n\n  return function (Component) {\n    var WithSearch = /*#__PURE__*/function (_React$PureComponent) {\n      _inherits(WithSearch, _React$PureComponent);\n\n      var _super = _createSuper(WithSearch);\n\n      function WithSearch(props, context) {\n        var _this;\n\n        _classCallCheck(this, WithSearch);\n\n        _this = _super.call(this);\n\n        _defineProperty(_assertThisInitialized(_this), \"subscription\", function (state) {\n          if (_this.unmounted) return;\n\n          _this.setState(function (prevState) {\n            return giveMeJustWhatINeeded(_objectSpread(_objectSpread({}, prevState), state), mapContextToProps, _this.props);\n          });\n        });\n\n        _this.state = _objectSpread({}, giveMeJustWhatINeeded(buildContextForProps(context), // eslint-disable-next-line react/prop-types\n        mapContextToProps, props)); // Note that we subscribe to changes at the component level, rather than\n        // at the top level Provider, so that we are re-rendering the entire\n        // subtree when state changes in the Provider.\n\n        context.driver.subscribeToStateChanges(_this.subscription);\n        return _this;\n      }\n\n      _createClass(WithSearch, [{\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          this.unmounted = true;\n          this.context.driver.unsubscribeToStateChanges(this.subscription);\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          // eslint-disable-next-line react/prop-types\n          var rest = _extends({}, this.props);\n\n          return /*#__PURE__*/React.createElement(Component, _extends({}, this.state, rest));\n        }\n      }]);\n\n      return WithSearch;\n    }(React.PureComponent);\n\n    WithSearch.contextType = SearchContext;\n    return WithSearch;\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;AACrC,yCACKA,OAAO,CAACC,MAARD,CAAeE,QAAfF,EADL,GAEKA,OAAO,CAACC,MAARD,CAAeG,UAAfH,EAFL;AAID;AAED;AACA;;;AACA,SAASI,qBAAT,CAA+BC,cAA/B,EAA+CC,iBAA/C,EAAkEC,KAAlE,EAAyE;AACvE,MAAMC,sBAAsB,GAAGD,KAAK,CAACD,iBAANC,IAA2BD,iBAA1D;AACA,SAAOE,sBAAsB,CAACH,cAAD,EAAiBE,KAAjB,CAAtBC,IAAiD,EAAxD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,UAAT,CAAoBH,iBAApB,EAAuC;AACpD,MAAI,CAACA,iBAAL,EAAwB;AACtB,UAAM,gGAAN;AACD;;AAED,SAAO,UAASI,SAAT,EAAoB;AAAA,QACnBC,UADmB;AAAAC;;AAAA;;AAEvB,0BAAYL,KAAZ,EAAmBP,OAAnB,EAA4B;AAAA;;AAAAa;;AAC1BC;;AAD0BC,uEAsBb,iBAAS;AACtB,cAAID,MAAKE,SAAT,EAAoB;;AACpBF,gBAAKG,QAAL,CAAc,qBAAS;AAAA,mBACrBb,qBAAqB,iCAIdc,SAJc,GAKdC,KALc,GAOnBb,iBAPmB,EAQnBQ,MAAKP,KARc,CADA;AAAvB;AAxB0B;;AAE1BO,cAAKK,KAAL,qBACKf,qBAAqB,CACtBL,oBAAoB,CAACC,OAAD,CADE,EAEtB;AACAM,yBAHsB,EAItBC,KAJsB,CAD1B,EAF0B,CAW1B;AACA;AACA;;AACAP,eAAO,CAACC,MAARD,CAAeoB,uBAAfpB,CAAuCc,MAAKO,YAA5CrB;AAd0B;AAe3B;;AAjBsBsB;AAAAC;AAAAC,eAmBvB,gCAAuB;AACrB,eAAKR,SAAL,GAAiB,IAAjB;AACA,eAAKhB,OAAL,CAAaC,MAAb,CAAoBwB,yBAApB,CAA8C,KAAKJ,YAAnD;AACD;AAtBsB;AAAAE;AAAAC,eAwCvB,kBAAS;AACP;AACA,cAAWE,IAAX,gBAAoB,KAAKnB,KAAzB;;AAEA,8BAAOV,oBAACa,SAAD,eAAe,KAAKS,KAApB,EAA+BO,IAA/B,EAAP;AACD;AA7CsB;;AAAA;AAAA,MACA7B,KAAK,CAAC8B,aADN;;AAgDzBhB,cAAU,CAACiB,WAAXjB,GAAyBb,aAAzBa;AACA,WAAOA,UAAP;AAjDF;AAmDD","names":["React","SearchContext","buildContextForProps","context","driver","getState","getActions","giveMeJustWhatINeeded","stateOrContext","mapContextToProps","props","mapContextToPropsToUse","withSearch","Component","WithSearch","_inherits","_classCallCheck","_this","_defineProperty","unmounted","setState","prevState","state","subscribeToStateChanges","subscription","_createClass","key","value","unsubscribeToStateChanges","rest","PureComponent","contextType"],"sources":["/Users/karina/Main/Study/Web Dev/7. Complited Projects/elasticsearch-test-api/node_modules/@elastic/react-search-ui/src/withSearch.js"],"sourcesContent":["import React from \"react\";\n\nimport SearchContext from \"./SearchContext\";\n\nfunction buildContextForProps(context) {\n  return {\n    ...context.driver.getState(),\n    ...context.driver.getActions()\n  };\n}\n\n/* For a given object execute mapContextToProps to pluck out the relevant\nproperties */\nfunction giveMeJustWhatINeeded(stateOrContext, mapContextToProps, props) {\n  const mapContextToPropsToUse = props.mapContextToProps || mapContextToProps;\n  return mapContextToPropsToUse(stateOrContext, props) || {};\n}\n\n/**\n * This is a Higher Order Component that wraps a component and injects state and actions from Search UI, effectively\n * \"connecting\" it to Search UI.\n *\n * Components using `withSearch` will be \"Pure\" components.\n * It is important to understand the implications of using a PureComponent, as described here:\n * https://reactjs.org/docs/optimizing-performance.html#examples\n *\n * @param Function mapContextToProps A function that accepts the context and allows you to pick the values to be passed as props\n * into the component. This allows you to \"select\" which values from the context to use.\n * @param Function Component\n */\nexport default function withSearch(mapContextToProps) {\n  if (!mapContextToProps) {\n    throw \"withSearch requires a function to be provided which returns an object with at least one value.\";\n  }\n\n  return function(Component) {\n    class WithSearch extends React.PureComponent {\n      constructor(props, context) {\n        super();\n        this.state = {\n          ...giveMeJustWhatINeeded(\n            buildContextForProps(context),\n            // eslint-disable-next-line react/prop-types\n            mapContextToProps,\n            props\n          )\n        };\n\n        // Note that we subscribe to changes at the component level, rather than\n        // at the top level Provider, so that we are re-rendering the entire\n        // subtree when state changes in the Provider.\n        context.driver.subscribeToStateChanges(this.subscription);\n      }\n\n      componentWillUnmount() {\n        this.unmounted = true;\n        this.context.driver.unsubscribeToStateChanges(this.subscription);\n      }\n\n      subscription = state => {\n        if (this.unmounted) return;\n        this.setState(prevState =>\n          giveMeJustWhatINeeded(\n            {\n              // We pass prevState here instead of just state so that actions are\n              // persisted as well, which are not passed in the subscription param\n              ...prevState,\n              ...state\n            },\n            mapContextToProps,\n            this.props\n          )\n        );\n      };\n\n      render() {\n        // eslint-disable-next-line react/prop-types\n        const { ...rest } = this.props;\n\n        return <Component {...this.state} {...rest} />;\n      }\n    }\n\n    WithSearch.contextType = SearchContext;\n    return WithSearch;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}