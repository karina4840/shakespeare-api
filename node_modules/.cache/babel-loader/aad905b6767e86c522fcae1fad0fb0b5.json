{"ast":null,"code":"var VALID_PROTOCOLS = [\"http:\", \"https:\"];\n/**\n *\n * @param {URL} URLParser URL interface provided by browser https://developer.mozilla.org/en-US/docs/Web/API/URL\n * @param {String} currentLocation String representation of the browser's current location\n */\n\nexport default function getUrlSanitizer(URLParser, currentLocation) {\n  // This function is curried so that dependencies can be injected and don't need to be mocked in tests.\n  return function (url) {\n    var parsedUrl = {};\n\n    try {\n      // Attempts to parse a URL as relative\n      parsedUrl = new URLParser(url, currentLocation); // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    return VALID_PROTOCOLS.includes(parsedUrl.protocol) ? url : \"\";\n  };\n}","map":{"version":3,"mappings":"AAAA,IAAMA,eAAe,GAAG,CAAC,OAAD,EAAU,QAAV,CAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,eAApC,EAAqD;AAClE;AACA,SAAO,eAAO;AACZ,QAAIC,SAAS,GAAG,EAAhB;;AAEA,QAAI;AACF;AACAA,eAAS,GAAG,IAAIF,SAAJ,CAAcG,GAAd,EAAmBF,eAAnB,CAAZC,CAFE,CAGF;AAHF,MAIE,OAAOE,CAAP,EAAU,CAAE;;AAEd,WAAON,eAAe,CAACO,QAAhBP,CAAyBI,SAAS,CAACI,QAAnCR,IAA+CK,GAA/CL,GAAqD,EAA5D;AATF;AAWD","names":["VALID_PROTOCOLS","getUrlSanitizer","URLParser","currentLocation","parsedUrl","url","e","includes","protocol"],"sources":["/Users/karina/Main/Study/Web Dev/test-api/node_modules/@elastic/react-search-ui-views/src/view-helpers/getUrlSanitizer.js"],"sourcesContent":["const VALID_PROTOCOLS = [\"http:\", \"https:\"];\n\n/**\n *\n * @param {URL} URLParser URL interface provided by browser https://developer.mozilla.org/en-US/docs/Web/API/URL\n * @param {String} currentLocation String representation of the browser's current location\n */\nexport default function getUrlSanitizer(URLParser, currentLocation) {\n  // This function is curried so that dependencies can be injected and don't need to be mocked in tests.\n  return url => {\n    let parsedUrl = {};\n\n    try {\n      // Attempts to parse a URL as relative\n      parsedUrl = new URLParser(url, currentLocation);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    return VALID_PROTOCOLS.includes(parsedUrl.protocol) ? url : \"\";\n  };\n}\n"]},"metadata":{},"sourceType":"module"}