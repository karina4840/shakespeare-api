{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n/**\n * Filter results - Replaces current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value FilterValue to apply\n * @param type String (Optional) type of filter to apply\n */\n\nexport default function setFilter(name, value) {\n  var _console;\n\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"all\"; // eslint-disable-next-line no-console\n\n  if (this.debug) (_console = console).log.apply(_console, [\"Search UI: Action\", \"setFilter\"].concat(Array.prototype.slice.call(arguments)));\n  var filters = this.state.filters;\n  filters = filters.filter(function (filter) {\n    return filter.field !== name || filter.type !== type;\n  });\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [].concat(_toConsumableArray(filters), [{\n      field: name,\n      values: [value],\n      type: type\n    }])\n  });\n}","map":{"version":3,"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAA8C;AAAA;;AAAA,MAAdC,IAAc,uEAAP,KAAO,EAC3D;;AACA,MAAI,KAAKC,KAAT,EAAgB,qBAAQC,GAAR,kBAAY,mBAAZ,EAAiC,WAAjC,oCAAiDC,SAAjD;AAEhB,MAAMC,OAAN,GAAkB,KAAKC,KAAL,CAAZD,OAAN;AACAA,SAAO,GAAGA,OAAO,CAACE,MAARF,CACR,kBAAM;AAAA,WAAIE,MAAM,CAACC,KAAPD,KAAiBR,IAAjBQ,IAAyBA,MAAM,CAACN,IAAPM,KAAgBN,IAA7C;AADE,IAAVI;;AAIA,OAAKI,oBAAL,CAA0B;AACxBC,WAAO,EAAE,CADe;AAExBL,WAAO,+BACFA,OADE,IAEL;AACEG,WAAK,EAAET,IADT;AAEEY,YAAM,EAAE,CAACX,KAAD,CAFV;AAGEC,UAAI,EAAJA;AAHF,KAFK;AAFiB,GAA1B;AAWD","names":["setFilter","name","value","type","debug","log","arguments","filters","state","filter","field","_updateSearchResults","current","values"],"sources":["/Users/karina/Main/Study/Web Dev/7. Complited Projects/elasticsearch-test-api/node_modules/@elastic/search-ui/src/actions/setFilter.js"],"sourcesContent":["/**\n * Filter results - Replaces current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value FilterValue to apply\n * @param type String (Optional) type of filter to apply\n */\nexport default function setFilter(name, value, type = \"all\") {\n  // eslint-disable-next-line no-console\n  if (this.debug) console.log(\"Search UI: Action\", \"setFilter\", ...arguments);\n\n  let { filters } = this.state;\n  filters = filters.filter(\n    filter => filter.field !== name || filter.type !== type\n  );\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [\n      ...filters,\n      {\n        field: name,\n        values: [value],\n        type\n      }\n    ]\n  });\n}\n"]},"metadata":{},"sourceType":"module"}