{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"allAutocompletedItemsCount\", \"autocompleteView\", \"isFocused\", \"inputProps\", \"inputView\", \"onChange\", \"onSelectAutocomplete\", \"onSubmit\", \"useAutocomplete\", \"value\", \"autocompletedResults\", \"autocompletedSuggestions\", \"autocompletedSuggestionsCount\", \"completeSuggestion\", \"notifyAutocompleteSelected\"],\n    _excluded2 = [\"className\"],\n    _excluded3 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Downshift from \"downshift\";\nimport { Result } from \"./types\";\nimport { Suggestion } from \"./types\";\nimport { appendClassName } from \"./view-helpers\";\nimport Autocomplete from \"./Autocomplete\";\nimport SearchInput from \"./SearchInput\";\n\nfunction SearchBox(props) {\n  var className = props.className,\n      allAutocompletedItemsCount = props.allAutocompletedItemsCount,\n      autocompleteView = props.autocompleteView,\n      isFocused = props.isFocused,\n      _props$inputProps = props.inputProps,\n      inputProps = _props$inputProps === void 0 ? {} : _props$inputProps,\n      inputView = props.inputView,\n      onChange = props.onChange,\n      onSelectAutocomplete = props.onSelectAutocomplete,\n      _onSubmit = props.onSubmit,\n      useAutocomplete = props.useAutocomplete,\n      value = props.value,\n      autocompletedResults = props.autocompletedResults,\n      autocompletedSuggestions = props.autocompletedSuggestions,\n      autocompletedSuggestionsCount = props.autocompletedSuggestionsCount,\n      completeSuggestion = props.completeSuggestion,\n      notifyAutocompleteSelected = props.notifyAutocompleteSelected,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var focusedClass = isFocused ? \"focus\" : \"\";\n  var AutocompleteView = autocompleteView || Autocomplete;\n  var InputView = inputView || SearchInput;\n  return /*#__PURE__*/React.createElement(Downshift, _extends({\n    inputValue: value,\n    onChange: onSelectAutocomplete,\n    onInputValueChange: function onInputValueChange(newValue) {\n      // To avoid over dispatching\n      if (value === newValue) return;\n      onChange(newValue);\n    } // Because when a selection is made, we don't really want to change\n    // the inputValue. This is supposed to be a \"controlled\" value, and when\n    // this happens we lose control of it.\n    ,\n    itemToString: function itemToString() {\n      return value;\n    }\n  }, rest), function (downshiftProps) {\n    var closeMenu = downshiftProps.closeMenu,\n        _getInputProps = downshiftProps.getInputProps,\n        isOpen = downshiftProps.isOpen;\n    var autocompleteClass = isOpen === true ? \" autocomplete\" : \"\";\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: function onSubmit(e) {\n        closeMenu();\n\n        _onSubmit(e);\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: appendClassName(\"sui-search-box\", className) + autocompleteClass\n    }, /*#__PURE__*/React.createElement(InputView, _extends({}, downshiftProps, {\n      getInputProps: function getInputProps(additionalProps) {\n        var _ref = additionalProps || {},\n            className = _ref.className,\n            rest = _objectWithoutProperties(_ref, _excluded2);\n\n        return _getInputProps(_objectSpread(_objectSpread({\n          placeholder: \"Search\"\n        }, inputProps), {}, {\n          className: appendClassName(\"sui-search-box__text-input\", [inputProps.className, className, focusedClass])\n        }, rest));\n      },\n      getButtonProps: function getButtonProps(additionalProps) {\n        var _ref2 = additionalProps || {},\n            className = _ref2.className,\n            rest = _objectWithoutProperties(_ref2, _excluded3);\n\n        return _objectSpread({\n          type: \"submit\",\n          value: \"Search\",\n          className: appendClassName(\"button sui-search-box__submit\", className)\n        }, rest);\n      },\n      getAutocomplete: function getAutocomplete() {\n        if (useAutocomplete && isOpen && allAutocompletedItemsCount > 0) {\n          return /*#__PURE__*/React.createElement(AutocompleteView, _extends({}, props, downshiftProps));\n        } else {\n          return null;\n        }\n      }\n    }))));\n  });\n}\n\nSearchBox.propTypes = {\n  // Provided by container\n  allAutocompletedItemsCount: PropTypes.number.isRequired,\n  autocompletedResults: PropTypes.arrayOf(Result).isRequired,\n  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion)).isRequired,\n  autocompletedSuggestionsCount: PropTypes.number.isRequired,\n  completeSuggestion: PropTypes.func.isRequired,\n  notifyAutocompleteSelected: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  autocompleteResults: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n    titleField: PropTypes.string.isRequired,\n    urlField: PropTypes.string.isRequired,\n    linkTarget: PropTypes.string,\n    sectionTitle: PropTypes.string\n  })]),\n  autocompleteView: PropTypes.func,\n  autocompleteSuggestions: PropTypes.oneOfType([PropTypes.bool, PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }), PropTypes.objectOf(PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }))]),\n  className: PropTypes.string,\n  inputProps: PropTypes.object,\n  inputView: PropTypes.func,\n  isFocused: PropTypes.bool,\n  useAutocomplete: PropTypes.bool,\n  // Specific configuration for this view only\n  onSelectAutocomplete: PropTypes.func\n};\nexport default SearchBox;","map":{"version":3,"mappings":"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","names":["PropTypes","React","Downshift","Result","Suggestion","appendClassName","Autocomplete","SearchInput","SearchBox","props","className","allAutocompletedItemsCount","autocompleteView","isFocused","inputProps","inputView","onChange","onSelectAutocomplete","onSubmit","useAutocomplete","value","autocompletedResults","autocompletedSuggestions","autocompletedSuggestionsCount","completeSuggestion","notifyAutocompleteSelected","rest","focusedClass","AutocompleteView","InputView","inputValue","onInputValueChange","newValue","itemToString","closeMenu","downshiftProps","getInputProps","isOpen","autocompleteClass","e","additionalProps","placeholder","getButtonProps","type","getAutocomplete","propTypes","number","isRequired","arrayOf","objectOf","func","string","autocompleteResults","oneOfType","bool","shape","titleField","urlField","linkTarget","sectionTitle","autocompleteSuggestions","exact","object"],"sources":["/Users/karina/Main/Study/Web Dev/elasticsearch-test-api/node_modules/@elastic/react-search-ui-views/src/SearchBox.js"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Downshift from \"downshift\";\n\nimport { Result } from \"./types\";\nimport { Suggestion } from \"./types\";\nimport { appendClassName } from \"./view-helpers\";\n\nimport Autocomplete from \"./Autocomplete\";\nimport SearchInput from \"./SearchInput\";\n\nfunction SearchBox(props) {\n  const {\n    className,\n    allAutocompletedItemsCount,\n    autocompleteView,\n    isFocused,\n    inputProps = {},\n    inputView,\n    onChange,\n    onSelectAutocomplete,\n    onSubmit,\n    useAutocomplete,\n    value,\n    // NOTE: These are explicitly de-structured but not used so that they are\n    // not passed through to the input with the 'rest' parameter\n    // eslint-disable-next-line no-unused-vars\n    autocompletedResults,\n    // eslint-disable-next-line no-unused-vars\n    autocompletedSuggestions,\n    // eslint-disable-next-line no-unused-vars\n    autocompletedSuggestionsCount,\n    // eslint-disable-next-line no-unused-vars\n    completeSuggestion,\n    // eslint-disable-next-line no-unused-vars\n    notifyAutocompleteSelected,\n    ...rest\n  } = props;\n  const focusedClass = isFocused ? \"focus\" : \"\";\n  const AutocompleteView = autocompleteView || Autocomplete;\n  const InputView = inputView || SearchInput;\n\n  return (\n    <Downshift\n      inputValue={value}\n      onChange={onSelectAutocomplete}\n      onInputValueChange={newValue => {\n        // To avoid over dispatching\n        if (value === newValue) return;\n        onChange(newValue);\n      }}\n      // Because when a selection is made, we don't really want to change\n      // the inputValue. This is supposed to be a \"controlled\" value, and when\n      // this happens we lose control of it.\n      itemToString={() => value}\n      {...rest}\n    >\n      {downshiftProps => {\n        const { closeMenu, getInputProps, isOpen } = downshiftProps;\n        let autocompleteClass = isOpen === true ? \" autocomplete\" : \"\";\n        return (\n          <form\n            onSubmit={e => {\n              closeMenu();\n              onSubmit(e);\n            }}\n          >\n            <div\n              className={\n                appendClassName(\"sui-search-box\", className) + autocompleteClass\n              }\n            >\n              <InputView\n                {...downshiftProps}\n                getInputProps={additionalProps => {\n                  const { className, ...rest } = additionalProps || {};\n                  return getInputProps({\n                    placeholder: \"Search\",\n                    ...inputProps,\n                    className: appendClassName(\"sui-search-box__text-input\", [\n                      inputProps.className,\n                      className,\n                      focusedClass\n                    ]),\n                    ...rest\n                  });\n                }}\n                getButtonProps={additionalProps => {\n                  const { className, ...rest } = additionalProps || {};\n                  return {\n                    type: \"submit\",\n                    value: \"Search\",\n                    className: appendClassName(\n                      \"button sui-search-box__submit\",\n                      className\n                    ),\n                    ...rest\n                  };\n                }}\n                getAutocomplete={() => {\n                  if (\n                    useAutocomplete &&\n                    isOpen &&\n                    allAutocompletedItemsCount > 0\n                  ) {\n                    return <AutocompleteView {...props} {...downshiftProps} />;\n                  } else {\n                    return null;\n                  }\n                }}\n              />\n            </div>\n          </form>\n        );\n      }}\n    </Downshift>\n  );\n}\n\nSearchBox.propTypes = {\n  // Provided by container\n  allAutocompletedItemsCount: PropTypes.number.isRequired,\n  autocompletedResults: PropTypes.arrayOf(Result).isRequired,\n  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion))\n    .isRequired,\n  autocompletedSuggestionsCount: PropTypes.number.isRequired,\n  completeSuggestion: PropTypes.func.isRequired,\n  notifyAutocompleteSelected: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  autocompleteResults: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({\n      titleField: PropTypes.string.isRequired,\n      urlField: PropTypes.string.isRequired,\n      linkTarget: PropTypes.string,\n      sectionTitle: PropTypes.string\n    })\n  ]),\n  autocompleteView: PropTypes.func,\n  autocompleteSuggestions: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.exact({\n      sectionTitle: PropTypes.string\n    }),\n    PropTypes.objectOf(\n      PropTypes.exact({\n        sectionTitle: PropTypes.string\n      })\n    )\n  ]),\n  className: PropTypes.string,\n  inputProps: PropTypes.object,\n  inputView: PropTypes.func,\n  isFocused: PropTypes.bool,\n  useAutocomplete: PropTypes.bool,\n\n  // Specific configuration for this view only\n  onSelectAutocomplete: PropTypes.func\n};\n\nexport default SearchBox;\n"]},"metadata":{},"sourceType":"module"}