{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { doFilterValuesMatch } from \"../helpers\";\n/**\n * Filter results - Adds to current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value String field value to filter on\n * @param type String (Optional) type of filter to apply\n */\n\nexport default function addFilter(name, value) {\n  var _console;\n\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"all\"; // eslint-disable-next-line no-console\n\n  if (this.debug) (_console = console).log.apply(_console, [\"Search UI: Action\", \"addFilter\"].concat(Array.prototype.slice.call(arguments)));\n  var filters = this.state.filters;\n  var existingFilter = filters.find(function (f) {\n    return f.field === name && f.type === type;\n  }) || {};\n  var allOtherFilters = filters.filter(function (f) {\n    return f.field !== name || f.type !== type;\n  }) || [];\n  var existingFilterValues = existingFilter.values || [];\n  var newFilterValues = existingFilterValues.find(function (existing) {\n    return doFilterValuesMatch(existing, value);\n  }) ? existingFilterValues : existingFilterValues.concat(value);\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [].concat(_toConsumableArray(allOtherFilters), [{\n      field: name,\n      values: newFilterValues,\n      type: type\n    }])\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,mBAAT,QAAoC,YAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAA8C;AAAA;;AAAA,MAAdC,IAAc,uEAAP,KAAO,EAC3D;;AACA,MAAI,KAAKC,KAAT,EAAgB,qBAAQC,GAAR,kBAAY,mBAAZ,EAAiC,WAAjC,oCAAiDC,SAAjD;AAEhB,MAAQC,OAAR,GAAoB,KAAKC,KAAL,CAAZD,OAAR;AAEA,MAAME,cAAc,GAClBF,OAAO,CAACG,IAARH,CAAa,aAAC;AAAA,WAAII,CAAC,CAACC,KAAFD,KAAYV,IAAZU,IAAoBA,CAAC,CAACR,IAAFQ,KAAWR,IAAnC;AAAd,QAA0D,EAD5D;AAEA,MAAMU,eAAe,GACnBN,OAAO,CAACO,MAARP,CAAe,aAAC;AAAA,WAAII,CAAC,CAACC,KAAFD,KAAYV,IAAZU,IAAoBA,CAAC,CAACR,IAAFQ,KAAWR,IAAnC;AAAhB,QAA4D,EAD9D;AAEA,MAAMY,oBAAoB,GAAGN,cAAc,CAACO,MAAfP,IAAyB,EAAtD;AAEA,MAAMQ,eAAe,GAAGF,oBAAoB,CAACL,IAArBK,CAA0B,oBAAQ;AAAA,WACxDhB,mBAAmB,CAACmB,QAAD,EAAWhB,KAAX,CADqC;AAAlC,OAGpBa,oBAHoBA,GAIpBA,oBAAoB,CAACI,MAArBJ,CAA4Bb,KAA5Ba,CAJJ;;AAMA,OAAKK,oBAAL,CAA0B;AACxBC,WAAO,EAAE,CADe;AAExBd,WAAO,+BACFM,eADE,IAEL;AAAED,WAAK,EAAEX,IAAT;AAAee,YAAM,EAAEC,eAAvB;AAAwCd,UAAI,EAAJA;AAAxC,KAFK;AAFiB,GAA1B;AAOD","names":["doFilterValuesMatch","addFilter","name","value","type","debug","log","arguments","filters","state","existingFilter","find","f","field","allOtherFilters","filter","existingFilterValues","values","newFilterValues","existing","concat","_updateSearchResults","current"],"sources":["/Users/karina/Main/Study/Web Dev/elasticsearch-api-test/node_modules/@elastic/search-ui/src/actions/addFilter.js"],"sourcesContent":["import { doFilterValuesMatch } from \"../helpers\";\n\n/**\n * Filter results - Adds to current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value String field value to filter on\n * @param type String (Optional) type of filter to apply\n */\nexport default function addFilter(name, value, type = \"all\") {\n  // eslint-disable-next-line no-console\n  if (this.debug) console.log(\"Search UI: Action\", \"addFilter\", ...arguments);\n\n  const { filters } = this.state;\n\n  const existingFilter =\n    filters.find(f => f.field === name && f.type === type) || {};\n  const allOtherFilters =\n    filters.filter(f => f.field !== name || f.type !== type) || [];\n  const existingFilterValues = existingFilter.values || [];\n\n  const newFilterValues = existingFilterValues.find(existing =>\n    doFilterValuesMatch(existing, value)\n  )\n    ? existingFilterValues\n    : existingFilterValues.concat(value);\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [\n      ...allOtherFilters,\n      { field: name, values: newFilterValues, type }\n    ]\n  });\n}\n"]},"metadata":{},"sourceType":"module"}