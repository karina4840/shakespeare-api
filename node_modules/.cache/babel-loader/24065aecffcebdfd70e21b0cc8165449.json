{"ast":null,"code":"import React, { useState, useEffect, useCallback } from 'react';\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar classnames = createCommonjsModule(function (module) {\n  /*!\n    Copyright (c) 2018 Jed Watson.\n    Licensed under the MIT License (MIT), see\n    http://jedwatson.github.io/classnames\n  */\n\n  /* global define */\n  (function () {\n    var hasOwn = {}.hasOwnProperty;\n\n    function classNames() {\n      var classes = [];\n\n      for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        if (!arg) continue;\n        var argType = typeof arg;\n\n        if (argType === 'string' || argType === 'number') {\n          classes.push(arg);\n        } else if (Array.isArray(arg)) {\n          if (arg.length) {\n            var inner = classNames.apply(null, arg);\n\n            if (inner) {\n              classes.push(inner);\n            }\n          }\n        } else if (argType === 'object') {\n          if (arg.toString === Object.prototype.toString) {\n            for (var key in arg) {\n              if (hasOwn.call(arg, key) && arg[key]) {\n                classes.push(key);\n              }\n            }\n          } else {\n            classes.push(arg.toString());\n          }\n        }\n      }\n\n      return classes.join(' ');\n    }\n\n    if (module.exports) {\n      classNames.default = classNames;\n      module.exports = classNames;\n    } else {\n      window.classNames = classNames;\n    }\n  })();\n});\n\nconst Pagination = _ref => {\n  let {\n    onPageСhange,\n    initialPage = 1,\n    totalItems,\n    itemsPerPage = 10,\n    startLabel = 'Start',\n    prevLabel = 'Prev',\n    nextLabel = 'Next',\n    endLabel = 'End',\n    pageNeighbours = 4,\n    withProgressBar = false,\n    onlyPageNumbers = false,\n    withGoToInput = false,\n    onlyPaginationButtons = false,\n    withDebug = false,\n    customClassNames = {}\n  } = _ref;\n  const [pager, setPager] = useState();\n  const [currentPage, setCurrentPage] = useState(initialPage);\n  const [goToInputValue, setGoToInputValue] = useState('');\n  const styleClassName = {\n    rpbRootClassName: customClassNames.rpbRootClassName || 'rpb-root',\n    rpbItemClassName: customClassNames.rpbItemClassName || 'rpb-item',\n    rpbItemClassNameActive: customClassNames.rpbItemClassNameActive || 'rpb-item--active',\n    rpbItemClassNameDisable: customClassNames.rpbItemClassNameDisable || 'rpb-item--disabled',\n    rpbProgressClassName: customClassNames.rpbProgressClassName || 'rpb-progress',\n    rpbGoItemClassName: customClassNames.rpbGoItemClassName || 'rpb-go-item'\n  };\n  /**\r\n   * Set new page when currentPage updates\r\n   */\n\n  useEffect(() => {\n    setPage(currentPage);\n\n    if (withDebug) {\n      console.log('Current pager state: ', pager);\n    }\n  }, [currentPage]);\n\n  const setPage = page => {\n    if (page < 1 || pager && page > pager.totalPages || typeof page !== 'number' || isNaN(page)) {\n      return;\n    } // Set new current page\n\n\n    setCurrentPage(page); // Update pager\n\n    getPager(); // Send new page outside component\n\n    onPageСhange(page);\n  };\n\n  const getPager = useCallback(() => {\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\n    let startPage;\n    let endPage;\n\n    if (totalPages <= pageNeighbours * 2 + 1) {\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      if (currentPage <= pageNeighbours) {\n        startPage = 1;\n        endPage = pageNeighbours * 2 + 1;\n      } else if (currentPage + pageNeighbours >= totalPages) {\n        startPage = totalPages - pageNeighbours * 2;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - pageNeighbours;\n        endPage = currentPage + pageNeighbours;\n      }\n    }\n\n    const pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i);\n    setPager({\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: itemsPerPage,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      pages: pages,\n      endLabel,\n      startLabel,\n      prevLabel,\n      nextLabel,\n      onPageСhange,\n      pageNeighbours,\n      withProgressBar,\n      onlyPageNumbers,\n      withGoToInput,\n      onlyPaginationButtons,\n      withDebug,\n      initialPage\n    });\n  }, [currentPage, itemsPerPage, totalItems]);\n\n  const onGoToPageSubmitHandle = () => {\n    const value = Number(goToInputValue);\n\n    if (pager) {\n      if (value <= 0) {\n        setPage(1);\n      } else if (value > pager.totalPages) {\n        setPage(pager.totalPages);\n      } else {\n        setPage(value);\n      }\n    }\n  };\n\n  if (pager && totalItems > itemsPerPage) {\n    return React.createElement(\"nav\", {\n      className: styleClassName.rpbRootClassName\n    }, React.createElement(\"ul\", {\n      id: \"rpb-pagination\",\n      \"aria-label\": `Pagination Navigation, Current Page ${pager.currentPage}`\n    }, !onlyPageNumbers && React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: classnames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pager.currentPage === 1\n      }),\n      \"aria-label\": 'Start',\n      onClick: () => setPage(1)\n    }, startLabel)), React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: classnames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pager.currentPage === 1\n      }),\n      \"aria-label\": 'Prev',\n      onClick: () => setPage(pager.currentPage - 1)\n    }, prevLabel))), !onlyPaginationButtons && pager.pages && pager.pages.map((page, index) => React.createElement(\"li\", {\n      key: index,\n      \"data-page\": page,\n      \"data-current\": pager.currentPage === page\n    }, React.createElement(\"button\", {\n      \"aria-label\": `Go to Page ${page}`,\n      \"aria-current\": pager.currentPage === page,\n      onClick: () => setPage(page),\n      className: classnames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameActive]: pager.currentPage === page\n      })\n    }, page))), !onlyPageNumbers && React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"button\", {\n      onClick: () => setPage(pager.currentPage + 1),\n      \"aria-label\": \"Next\",\n      className: classnames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pager.currentPage === pager.totalPages\n      })\n    }, nextLabel)), React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: classnames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pager.currentPage === pager.totalPages\n      }),\n      \"aria-label\": 'End',\n      onClick: () => setPage(pager.totalPages)\n    }, endLabel))), withGoToInput && React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"div\", {\n      className: styleClassName.rpbGoItemClassName\n    }, React.createElement(\"input\", {\n      type: \"number\",\n      onChange: e => setGoToInputValue(e.target.value)\n    }))), React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: styleClassName.rpbItemClassName,\n      onClick: onGoToPageSubmitHandle\n    }, \"Go\")))), withProgressBar && React.createElement(\"div\", {\n      role: \"progressbar\",\n      \"aria-valuenow\": pager.currentPage !== 1 ? Math.round(pager.currentPage / pager.totalPages * 100) : 0,\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": 100,\n      \"aria-labelledby\": \"rpb-pagination\",\n      className: styleClassName.rpbProgressClassName,\n      style: {\n        width: pager.currentPage !== 1 ? Math.round(pager.currentPage / pager.totalPages * 100) + '%' : 0 + '%'\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nexport { Pagination };","map":{"version":3,"mappings":"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","names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","window","Pagination","onPageСhange","initialPage","totalItems","itemsPerPage","startLabel","prevLabel","nextLabel","endLabel","pageNeighbours","withProgressBar","onlyPageNumbers","withGoToInput","onlyPaginationButtons","withDebug","customClassNames","pager","setPager","useState","currentPage","setCurrentPage","goToInputValue","setGoToInputValue","styleClassName","rpbRootClassName","rpbItemClassName","rpbItemClassNameActive","rpbItemClassNameDisable","rpbProgressClassName","rpbGoItemClassName","useEffect","setPage","console","log","page","totalPages","isNaN","getPager","useCallback","Math","ceil","startPage","endPage","pages","keys","map","pageSize","onGoToPageSubmitHandle","value","Number","React","className","id","onClick","index","type","onChange","e","target","role","round","style","width"],"sources":["/Users/karina/Main/Study/Web Dev/fix-api-test/node_modules/react-pagination-bar/node_modules/classnames/index.js","/Users/karina/Main/Study/Web Dev/fix-api-test/node_modules/react-pagination-bar/src/Pagination.tsx"],"sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport './index.css';\r\n\r\ntype RPBPagerState = Omit<RPBPaginationProps, 'itemsPerPage'> & {\r\n  totalItems: number;\r\n  currentPage: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n  startPage: number;\r\n  endPage: number;\r\n  pages: number[];\r\n};\r\n\r\ntype RPBClassNamesCustomization = {\r\n  rpbRootClassName?: string;\r\n  rpbItemClassName?: string;\r\n  rpbItemClassNameActive?: string;\r\n  rpbItemClassNameDisable?: string;\r\n  rpbProgressClassName?: string;\r\n  rpbGoItemClassName?: string;\r\n};\r\n\r\ntype RPBPaginationProps = {\r\n  onPageСhange: (pageNumber: number) => void;\r\n  initialPage?: number;\r\n  totalItems: number;\r\n  itemsPerPage: number;\r\n  startLabel?: string;\r\n  prevLabel?: string;\r\n  nextLabel?: string;\r\n  endLabel?: string;\r\n  pageNeighbours?: number;\r\n  withProgressBar?: boolean;\r\n  onlyPageNumbers?: boolean;\r\n  onlyPaginationButtons?: boolean;\r\n  withGoToInput?: boolean;\r\n  customClassNames?: RPBClassNamesCustomization;\r\n  withDebug?: boolean;\r\n};\r\n\r\nexport const Pagination: React.FC<RPBPaginationProps> = ({\r\n  onPageСhange,\r\n  initialPage = 1,\r\n  totalItems,\r\n  itemsPerPage = 10,\r\n  startLabel = 'Start',\r\n  prevLabel = 'Prev',\r\n  nextLabel = 'Next',\r\n  endLabel = 'End',\r\n  pageNeighbours = 4,\r\n  withProgressBar = false,\r\n  onlyPageNumbers = false,\r\n  withGoToInput = false,\r\n  onlyPaginationButtons = false,\r\n  withDebug = false,\r\n  customClassNames = {},\r\n}) => {\r\n  const [pager, setPager] = useState<RPBPagerState>();\r\n  const [currentPage, setCurrentPage] = useState<number>(initialPage);\r\n  const [goToInputValue, setGoToInputValue] = useState<string>('');\r\n\r\n  const styleClassName = {\r\n    rpbRootClassName: customClassNames.rpbRootClassName || 'rpb-root',\r\n    rpbItemClassName: customClassNames.rpbItemClassName || 'rpb-item',\r\n    rpbItemClassNameActive:\r\n      customClassNames.rpbItemClassNameActive || 'rpb-item--active',\r\n    rpbItemClassNameDisable:\r\n      customClassNames.rpbItemClassNameDisable || 'rpb-item--disabled',\r\n    rpbProgressClassName:\r\n      customClassNames.rpbProgressClassName || 'rpb-progress',\r\n    rpbGoItemClassName: customClassNames.rpbGoItemClassName || 'rpb-go-item',\r\n  } as Required<RPBClassNamesCustomization>;\r\n\r\n  /**\r\n   * Set new page when currentPage updates\r\n   */\r\n  useEffect(() => {\r\n    setPage(currentPage);\r\n    if (withDebug) {\r\n      console.log('Current pager state: ', pager);\r\n    }\r\n  }, [currentPage]);\r\n\r\n  const setPage = (page: number): void => {\r\n    if (\r\n      page < 1 ||\r\n      (pager && page > pager.totalPages) ||\r\n      typeof page !== 'number' ||\r\n      isNaN(page)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Set new current page\r\n    setCurrentPage(page);\r\n\r\n    // Update pager\r\n    getPager();\r\n\r\n    // Send new page outside component\r\n    onPageСhange(page);\r\n  };\r\n\r\n  const getPager = useCallback((): void => {\r\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n\r\n    let startPage: number;\r\n    let endPage: number;\r\n\r\n    if (totalPages <= pageNeighbours * 2 + 1) {\r\n      startPage = 1;\r\n      endPage = totalPages;\r\n    } else {\r\n      if (currentPage <= pageNeighbours) {\r\n        startPage = 1;\r\n        endPage = pageNeighbours * 2 + 1;\r\n      } else if (currentPage + pageNeighbours >= totalPages) {\r\n        startPage = totalPages - pageNeighbours * 2;\r\n        endPage = totalPages;\r\n      } else {\r\n        startPage = currentPage - pageNeighbours;\r\n        endPage = currentPage + pageNeighbours;\r\n      }\r\n    }\r\n\r\n    const pages = [...Array(endPage + 1 - startPage).keys()].map(\r\n      (i) => startPage + i\r\n    );\r\n\r\n    setPager({\r\n      totalItems: totalItems,\r\n      currentPage: currentPage,\r\n      pageSize: itemsPerPage,\r\n      totalPages: totalPages,\r\n      startPage: startPage,\r\n      endPage: endPage,\r\n      pages: pages,\r\n      endLabel,\r\n      startLabel,\r\n      prevLabel,\r\n      nextLabel,\r\n      onPageСhange,\r\n      pageNeighbours,\r\n      withProgressBar,\r\n      onlyPageNumbers,\r\n      withGoToInput,\r\n      onlyPaginationButtons,\r\n      withDebug,\r\n      initialPage,\r\n    });\r\n  }, [currentPage, itemsPerPage, totalItems]);\r\n\r\n  const onGoToPageSubmitHandle = (): void => {\r\n    const value = Number(goToInputValue);\r\n\r\n    if (pager) {\r\n      if (value <= 0) {\r\n        setPage(1);\r\n      } else if (value > pager.totalPages) {\r\n        setPage(pager.totalPages);\r\n      } else {\r\n        setPage(value);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (pager && totalItems > itemsPerPage) {\r\n    return (\r\n      <nav className={styleClassName.rpbRootClassName}>\r\n        <ul\r\n          id=\"rpb-pagination\"\r\n          aria-label={`Pagination Navigation, Current Page ${pager.currentPage}`}>\r\n          {!onlyPageNumbers && (\r\n            <>\r\n              <li>\r\n                <button\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pager.currentPage === 1,\r\n                  })}\r\n                  aria-label={'Start'}\r\n                  onClick={() => setPage(1)}>\r\n                  {startLabel}\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pager.currentPage === 1,\r\n                  })}\r\n                  aria-label={'Prev'}\r\n                  onClick={() => setPage(pager.currentPage - 1)}>\r\n                  {prevLabel}\r\n                </button>\r\n              </li>\r\n            </>\r\n          )}\r\n\r\n          {!onlyPaginationButtons &&\r\n            pager.pages &&\r\n            pager.pages.map((page, index) => (\r\n              <li\r\n                key={index}\r\n                data-page={page}\r\n                data-current={pager.currentPage === page}>\r\n                <button\r\n                  aria-label={`Go to Page ${page}`}\r\n                  aria-current={pager.currentPage === page}\r\n                  onClick={() => setPage(page)}\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameActive]:\r\n                      pager.currentPage === page,\r\n                  })}>\r\n                  {page}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          {!onlyPageNumbers && (\r\n            <>\r\n              <li>\r\n                <button\r\n                  onClick={() => setPage(pager.currentPage + 1)}\r\n                  aria-label=\"Next\"\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pager.currentPage === pager.totalPages,\r\n                  })}>\r\n                  {nextLabel}\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pager.currentPage === pager.totalPages,\r\n                  })}\r\n                  aria-label={'End'}\r\n                  onClick={() => setPage(pager.totalPages)}>\r\n                  {endLabel}\r\n                </button>\r\n              </li>\r\n            </>\r\n          )}\r\n          {withGoToInput && (\r\n            <>\r\n              <li>\r\n                <div className={styleClassName.rpbGoItemClassName}>\r\n                  <input\r\n                    type=\"number\"\r\n                    onChange={(e) => setGoToInputValue(e.target.value)}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={styleClassName.rpbItemClassName}\r\n                  onClick={onGoToPageSubmitHandle}>\r\n                  Go\r\n                </button>\r\n              </li>\r\n            </>\r\n          )}\r\n        </ul>\r\n        {withProgressBar && (\r\n          <div\r\n            role=\"progressbar\"\r\n            aria-valuenow={\r\n              pager.currentPage !== 1\r\n                ? Math.round((pager.currentPage / pager.totalPages) * 100)\r\n                : 0\r\n            }\r\n            aria-valuemin={0}\r\n            aria-valuemax={100}\r\n            aria-labelledby=\"rpb-pagination\"\r\n            className={styleClassName.rpbProgressClassName}\r\n            style={{\r\n              width:\r\n                pager.currentPage !== 1\r\n                  ? Math.round((pager.currentPage / pager.totalPages) * 100) +\r\n                    '%'\r\n                  : 0 + '%',\r\n            }}></div>\r\n        )}\r\n      </nav>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}