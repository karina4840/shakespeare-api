{"ast":null,"code":"import { removeSingleFilterValue } from \"../helpers\";\n/**\n * Remove filter from results\n *\n * Will trigger new search\n *\n * @param name String field name for filter to remove\n * @param value String (Optional) field value for filter to remove\n * @param type String (Optional) type of filter to remove\n */\n\nexport default function removeFilter(name, value, type) {\n  var _console;\n\n  if (this.debug) // eslint-disable-next-line no-console\n    (_console = console).log.apply(_console, [\"Search UI: Action\", \"removeFilter\"].concat(Array.prototype.slice.call(arguments)));\n  var filters = this.state.filters;\n  var updatedFilters = filters;\n\n  if (!value && type) {\n    updatedFilters = filters.filter(function (filter) {\n      return !(filter.field === name && filter.type === type);\n    });\n  } else if (value) {\n    updatedFilters = removeSingleFilterValue(filters, name, value, type);\n  } else {\n    updatedFilters = filters.filter(function (filter) {\n      return filter.field !== name;\n    });\n  }\n\n  this._updateSearchResults({\n    current: 1,\n    filters: updatedFilters\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,uBAAT,QAAwC,YAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmCC,IAAnC,EAAyC;AAAA;;AACtD,MAAI,KAAKC,KAAT,EACE;AACA,yBAAQC,GAAR,kBAAY,mBAAZ,EAAiC,cAAjC,oCAAoDC,SAApD;AAEF,MAAQC,OAAR,GAAoB,KAAKC,KAAL,CAAZD,OAAR;AAEA,MAAIE,cAAc,GAAGF,OAArB;;AAEA,MAAI,CAACL,KAAD,IAAUC,IAAd,EAAoB;AAClBM,kBAAc,GAAGF,OAAO,CAACG,MAARH,CACf,kBAAM;AAAA,aAAI,EAAEG,MAAM,CAACC,KAAPD,KAAiBT,IAAjBS,IAAyBA,MAAM,CAACP,IAAPO,KAAgBP,IAA3C,CAAJ;AADS,MAAjBM;AADF,SAIO,IAAIP,KAAJ,EAAW;AAChBO,kBAAc,GAAGV,uBAAuB,CAACQ,OAAD,EAAUN,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,CAAxCM;AADK,SAEA;AACLA,kBAAc,GAAGF,OAAO,CAACG,MAARH,CAAe,kBAAM;AAAA,aAAIG,MAAM,CAACC,KAAPD,KAAiBT,IAArB;AAArB,MAAjBQ;AACD;;AAED,OAAKG,oBAAL,CAA0B;AACxBC,WAAO,EAAE,CADe;AAExBN,WAAO,EAAEE;AAFe,GAA1B;AAID","names":["removeSingleFilterValue","removeFilter","name","value","type","debug","log","arguments","filters","state","updatedFilters","filter","field","_updateSearchResults","current"],"sources":["/Users/karina/Main/Study/Web Dev/7. Complited Projects/elasticsearch-test-api/node_modules/@elastic/search-ui/src/actions/removeFilter.js"],"sourcesContent":["import { removeSingleFilterValue } from \"../helpers\";\n\n/**\n * Remove filter from results\n *\n * Will trigger new search\n *\n * @param name String field name for filter to remove\n * @param value String (Optional) field value for filter to remove\n * @param type String (Optional) type of filter to remove\n */\nexport default function removeFilter(name, value, type) {\n  if (this.debug)\n    // eslint-disable-next-line no-console\n    console.log(\"Search UI: Action\", \"removeFilter\", ...arguments);\n\n  const { filters } = this.state;\n\n  let updatedFilters = filters;\n\n  if (!value && type) {\n    updatedFilters = filters.filter(\n      filter => !(filter.field === name && filter.type === type)\n    );\n  } else if (value) {\n    updatedFilters = removeSingleFilterValue(filters, name, value, type);\n  } else {\n    updatedFilters = filters.filter(filter => filter.field !== name);\n  }\n\n  this._updateSearchResults({\n    current: 1,\n    filters: updatedFilters\n  });\n}\n"]},"metadata":{},"sourceType":"module"}