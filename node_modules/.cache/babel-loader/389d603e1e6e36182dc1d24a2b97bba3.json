{"ast":null,"code":"import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Select, { components } from \"react-select\";\nimport { FacetValue } from \"./types\";\nimport { getFilterValueDisplay } from \"./view-helpers\";\nimport { appendClassName } from \"./view-helpers\";\n\nfunction Option(props) {\n  return /*#__PURE__*/React.createElement(components.Option, props, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sui-select__option-label\"\n  }, props.data.label), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sui-select__option-count\"\n  }, props.data.count.toLocaleString(\"en\")));\n}\n\nOption.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nfunction toSelectBoxOption(filterValue) {\n  return {\n    value: filterValue.value,\n    label: getFilterValueDisplay(filterValue.value),\n    count: filterValue.count\n  };\n}\n\nvar setDefaultStyle = {\n  option: function option() {\n    return {};\n  },\n  control: function control() {\n    return {};\n  },\n  dropdownIndicator: function dropdownIndicator() {\n    return {};\n  },\n  indicatorSeparator: function indicatorSeparator() {\n    return {};\n  }\n};\n\nfunction SingleSelectFacet(_ref) {\n  var className = _ref.className,\n      label = _ref.label,\n      _onChange = _ref.onChange,\n      options = _ref.options;\n  var selectedSelectBoxOption;\n  var isSelectedSelectBoxOptionSet = false;\n  var selectBoxOptions = options.map(function (option) {\n    var selectBoxOption = toSelectBoxOption(option); // There should never be multiple filters set for this facet because it is single select,\n    // but if there is, we use the first value.\n\n    if (option.selected && !isSelectedSelectBoxOptionSet) {\n      selectedSelectBoxOption = selectBoxOption;\n      isSelectedSelectBoxOptionSet = true;\n    }\n\n    return selectBoxOption;\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: appendClassName(\"sui-facet\", className)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sui-facet__title\"\n  }, label), /*#__PURE__*/React.createElement(Select, {\n    className: \"sui-select\",\n    classNamePrefix: \"sui-select\",\n    components: {\n      Option: Option\n    },\n    value: selectedSelectBoxOption,\n    onChange: function onChange(o) {\n      return _onChange(o.value);\n    },\n    options: selectBoxOptions,\n    isSearchable: false,\n    styles: setDefaultStyle\n  }));\n}\n\nSingleSelectFacet.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(FacetValue).isRequired,\n  className: PropTypes.string\n};\nexport default SingleSelectFacet;","map":{"version":3,"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,cAAnC;AAEA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AACA,SAASC,eAAT,QAAgC,gBAAhC;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,sBACEP,oBAACE,UAAD,CAAYI,MAAZ,EAAuBC,KAAvB,eACEP;AAAMQ,aAAS,EAAC;AAAhB,KAA4CD,KAAK,CAACE,IAANF,CAAWG,KAAvD,CADF,eAEEV;AAAMQ,aAAS,EAAC;AAAhB,KACGD,KAAK,CAACE,IAANF,CAAWI,KAAXJ,CAAiBK,cAAjBL,CAAgC,IAAhCA,CADH,CAFF,CADF;AAQD;;AAEDD,MAAM,CAACO,SAAPP,GAAmB;AACjBG,MAAI,EAAEV,SAAS,CAACe,MAAVf,CAAiBgB;AADN,CAAnBT;;AAIA,SAASU,iBAAT,CAA2BC,WAA3B,EAAwC;AACtC,SAAO;AACLC,SAAK,EAAED,WAAW,CAACC,KADd;AAELR,SAAK,EAAEN,qBAAqB,CAACa,WAAW,CAACC,KAAb,CAFvB;AAGLP,SAAK,EAAEM,WAAW,CAACN;AAHd,GAAP;AAKD;;AAED,IAAMQ,eAAe,GAAG;AACtBC,QAAM,EAAE;AAAA,WAAO,EAAP;AADc;AAEtBC,SAAO,EAAE;AAAA,WAAO,EAAP;AAFa;AAGtBC,mBAAiB,EAAE;AAAA,WAAO,EAAP;AAHG;AAItBC,oBAAkB,EAAE;AAAA,WAAO,EAAP;AAAA;AAJE,CAAxB;;AAOA,SAASC,iBAAT,OAAoE;AAAA,MAAvChB,SAAuC,QAAvCA,SAAuC;AAAA,MAA5BE,KAA4B,QAA5BA,KAA4B;AAAA,MAArBe,SAAqB,QAArBA,QAAqB;AAAA,MAAXC,OAAW,QAAXA,OAAW;AAClE,MAAIC,uBAAJ;AACA,MAAIC,4BAA4B,GAAG,KAAnC;AAEA,MAAMC,gBAAgB,GAAGH,OAAO,CAACI,GAARJ,CAAY,kBAAU;AAC7C,QAAMK,eAAe,GAAGf,iBAAiB,CAACI,MAAD,CAAzC,CAD6C,CAE7C;AACA;;AACA,QAAIA,MAAM,CAACY,QAAPZ,IAAmB,CAACQ,4BAAxB,EAAsD;AACpDD,6BAAuB,GAAGI,eAA1BJ;AACAC,kCAA4B,GAAG,IAA/BA;AACD;;AACD,WAAOG,eAAP;AARuB,IAAzB;AAWA,sBACE/B;AAAKQ,aAAS,EAAEH,eAAe,CAAC,WAAD,EAAcG,SAAd;AAA/B,kBACER;AAAKQ,aAAS,EAAC;AAAf,KAAmCE,KAAnC,CADF,eAEEV,oBAACC,MAAD;AACEO,aAAS,EAAC,YADZ;AAEEyB,mBAAe,EAAC,YAFlB;AAGE/B,cAAU,EAAE;AAAEI,YAAM,EAANA;AAAF,KAHd;AAIEY,SAAK,EAAES,uBAJT;AAKEF,YAAQ,EAAE,qBAAC;AAAA,aAAIA,SAAQ,CAACS,CAAC,CAAChB,KAAH,CAAZ;AALb;AAMEQ,WAAO,EAAEG,gBANX;AAOEM,gBAAY,EAAE,KAPhB;AAQEC,UAAM,EAAEjB;AARV,IAFF,CADF;AAeD;;AAEDK,iBAAiB,CAACX,SAAlBW,GAA8B;AAC5Bd,OAAK,EAAEX,SAAS,CAACsC,MAAVtC,CAAiBgB,UADI;AAE5BU,UAAQ,EAAE1B,SAAS,CAACuC,IAAVvC,CAAegB,UAFG;AAG5BW,SAAO,EAAE3B,SAAS,CAACwC,OAAVxC,CAAkBI,UAAlBJ,EAA8BgB,UAHX;AAI5BP,WAAS,EAAET,SAAS,CAACsC;AAJO,CAA9Bb;AAOA,eAAeA,iBAAf","names":["PropTypes","React","Select","components","FacetValue","getFilterValueDisplay","appendClassName","Option","props","className","data","label","count","toLocaleString","propTypes","object","isRequired","toSelectBoxOption","filterValue","value","setDefaultStyle","option","control","dropdownIndicator","indicatorSeparator","SingleSelectFacet","onChange","options","selectedSelectBoxOption","isSelectedSelectBoxOptionSet","selectBoxOptions","map","selectBoxOption","selected","classNamePrefix","o","isSearchable","styles","string","func","arrayOf"],"sources":["/Users/karina/Main/Study/Web Dev/7. Complited Projects/elasticsearch-test-api/node_modules/@elastic/react-search-ui-views/src/SingleSelectFacet.js"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Select, { components } from \"react-select\";\n\nimport { FacetValue } from \"./types\";\nimport { getFilterValueDisplay } from \"./view-helpers\";\nimport { appendClassName } from \"./view-helpers\";\n\nfunction Option(props) {\n  return (\n    <components.Option {...props}>\n      <span className=\"sui-select__option-label\">{props.data.label}</span>\n      <span className=\"sui-select__option-count\">\n        {props.data.count.toLocaleString(\"en\")}\n      </span>\n    </components.Option>\n  );\n}\n\nOption.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nfunction toSelectBoxOption(filterValue) {\n  return {\n    value: filterValue.value,\n    label: getFilterValueDisplay(filterValue.value),\n    count: filterValue.count\n  };\n}\n\nconst setDefaultStyle = {\n  option: () => ({}),\n  control: () => ({}),\n  dropdownIndicator: () => ({}),\n  indicatorSeparator: () => ({})\n};\n\nfunction SingleSelectFacet({ className, label, onChange, options }) {\n  let selectedSelectBoxOption;\n  let isSelectedSelectBoxOptionSet = false;\n\n  const selectBoxOptions = options.map(option => {\n    const selectBoxOption = toSelectBoxOption(option);\n    // There should never be multiple filters set for this facet because it is single select,\n    // but if there is, we use the first value.\n    if (option.selected && !isSelectedSelectBoxOptionSet) {\n      selectedSelectBoxOption = selectBoxOption;\n      isSelectedSelectBoxOptionSet = true;\n    }\n    return selectBoxOption;\n  });\n\n  return (\n    <div className={appendClassName(\"sui-facet\", className)}>\n      <div className=\"sui-facet__title\">{label}</div>\n      <Select\n        className=\"sui-select\"\n        classNamePrefix=\"sui-select\"\n        components={{ Option }}\n        value={selectedSelectBoxOption}\n        onChange={o => onChange(o.value)}\n        options={selectBoxOptions}\n        isSearchable={false}\n        styles={setDefaultStyle}\n      />\n    </div>\n  );\n}\n\nSingleSelectFacet.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(FacetValue).isRequired,\n  className: PropTypes.string\n};\n\nexport default SingleSelectFacet;\n"]},"metadata":{},"sourceType":"module"}