{"ast":null,"code":"/**\n * This helper creates a live region that announces the results of certain\n * actions (e.g. searching, paging, etc.), that are otherwise invisible\n * to screen reader users.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n */\nvar regionId = \"search-ui-screen-reader-notifications\";\nvar hasDOM = typeof document !== \"undefined\"; // Prevent errors in SSR apps\n\nvar getLiveRegion = function getLiveRegion() {\n  if (!hasDOM) return;\n  var region = document.getElementById(regionId);\n  if (region) return region;\n  region = document.createElement(\"div\");\n  region.id = regionId;\n  region.setAttribute(\"role\", \"status\");\n  region.setAttribute(\"aria-live\", \"polite\");\n  /**\n   * Visually-hidden CSS that's still available to screen readers.\n   * We're avoiding putting this in a stylesheet to ensure that this\n   * still works for users that opt for custom views & CSS. We're\n   * also opting to use CSSOM instead of inline styles to avoid\n   * Content Security Policy warnings.\n   *\n   * @see https://accessibility.18f.gov/hidden-content/\n   */\n\n  region.style.position = \"absolute\";\n  region.style.width = \"1px\";\n  region.style.height = \"1px\";\n  region.style.margin = \"-1px\";\n  region.style.padding = \"0\";\n  region.style.border = \"0\";\n  region.style.overflow = \"hidden\";\n  region.style.clip = \"rect(0 0 0 0)\";\n  document.body.appendChild(region);\n  return region;\n};\n\nvar announceToScreenReader = function announceToScreenReader(announcement) {\n  if (hasDOM) {\n    var region = getLiveRegion();\n    region.textContent = announcement;\n  }\n};\n\nvar defaultMessages = {\n  searchResults: function searchResults(_ref) {\n    var start = _ref.start,\n        end = _ref.end,\n        totalResults = _ref.totalResults,\n        searchTerm = _ref.searchTerm;\n    var message = \"Showing \".concat(start, \" to \").concat(end, \" results out of \").concat(totalResults);\n    if (searchTerm) message += \", searching for \\\"\".concat(searchTerm, \"\\\".\");\n    return message;\n  }\n};\nexport { getLiveRegion, announceToScreenReader, defaultMessages };","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,QAAQ,GAAG,uCAAjB;AACA,IAAMC,MAAM,GAAG,OAAOC,QAAP,KAAoB,WAAnC,C,CAAgD;;AAEhD,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,MAAI,CAACF,MAAL,EAAa;AAEb,MAAIG,MAAM,GAAGF,QAAQ,CAACG,cAATH,CAAwBF,QAAxBE,CAAb;AACA,MAAIE,MAAJ,EAAY,OAAOA,MAAP;AAEZA,QAAM,GAAGF,QAAQ,CAACI,aAATJ,CAAuB,KAAvBA,CAATE;AACAA,QAAM,CAACG,EAAPH,GAAYJ,QAAZI;AACAA,QAAM,CAACI,YAAPJ,CAAoB,MAApBA,EAA4B,QAA5BA;AACAA,QAAM,CAACI,YAAPJ,CAAoB,WAApBA,EAAiC,QAAjCA;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACEA,QAAM,CAACK,KAAPL,CAAaM,QAAbN,GAAwB,UAAxBA;AACAA,QAAM,CAACK,KAAPL,CAAaO,KAAbP,GAAqB,KAArBA;AACAA,QAAM,CAACK,KAAPL,CAAaQ,MAAbR,GAAsB,KAAtBA;AACAA,QAAM,CAACK,KAAPL,CAAaS,MAAbT,GAAsB,MAAtBA;AACAA,QAAM,CAACK,KAAPL,CAAaU,OAAbV,GAAuB,GAAvBA;AACAA,QAAM,CAACK,KAAPL,CAAaW,MAAbX,GAAsB,GAAtBA;AACAA,QAAM,CAACK,KAAPL,CAAaY,QAAbZ,GAAwB,QAAxBA;AACAA,QAAM,CAACK,KAAPL,CAAaa,IAAbb,GAAoB,eAApBA;AAEAF,UAAQ,CAACgB,IAAThB,CAAciB,WAAdjB,CAA0BE,MAA1BF;AACA,SAAOE,MAAP;AA9BF;;AAiCA,IAAMgB,sBAAsB,GAAG,SAAzBA,sBAAyB,eAAgB;AAC7C,MAAInB,MAAJ,EAAY;AACV,QAAMG,MAAM,GAAGD,aAAa,EAA5B;AACAC,UAAM,CAACiB,WAAPjB,GAAqBkB,YAArBlB;AACD;AAJH;;AAOA,IAAMmB,eAAe,GAAG;AACtBC,eAAa,EAAE,6BAA8C;AAAA,QAA3CC,KAA2C,QAA3CA,KAA2C;AAAA,QAApCC,GAAoC,QAApCA,GAAoC;AAAA,QAA/BC,YAA+B,QAA/BA,YAA+B;AAAA,QAAjBC,UAAiB,QAAjBA,UAAiB;AAC3D,QAAIC,OAAO,qBAAcJ,KAAd,iBAA0BC,GAA1B,6BAAgDC,YAAhD,CAAX;AACA,QAAIC,UAAJ,EAAgBC,OAAO,gCAAwBD,UAAxB,QAAPC;AAChB,WAAOA,OAAP;AACD;AALqB,CAAxB;AAQA,SAAS1B,aAAT,EAAwBiB,sBAAxB,EAAgDG,eAAhD","names":["regionId","hasDOM","document","getLiveRegion","region","getElementById","createElement","id","setAttribute","style","position","width","height","margin","padding","border","overflow","clip","body","appendChild","announceToScreenReader","textContent","announcement","defaultMessages","searchResults","start","end","totalResults","searchTerm","message"],"sources":["/Users/karina/Main/Study/Web Dev/elasticsearch-test-api/node_modules/@elastic/search-ui/src/A11yNotifications.js"],"sourcesContent":["/**\n * This helper creates a live region that announces the results of certain\n * actions (e.g. searching, paging, etc.), that are otherwise invisible\n * to screen reader users.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n */\nconst regionId = \"search-ui-screen-reader-notifications\";\nconst hasDOM = typeof document !== \"undefined\"; // Prevent errors in SSR apps\n\nconst getLiveRegion = () => {\n  if (!hasDOM) return;\n\n  let region = document.getElementById(regionId);\n  if (region) return region;\n\n  region = document.createElement(\"div\");\n  region.id = regionId;\n  region.setAttribute(\"role\", \"status\");\n  region.setAttribute(\"aria-live\", \"polite\");\n\n  /**\n   * Visually-hidden CSS that's still available to screen readers.\n   * We're avoiding putting this in a stylesheet to ensure that this\n   * still works for users that opt for custom views & CSS. We're\n   * also opting to use CSSOM instead of inline styles to avoid\n   * Content Security Policy warnings.\n   *\n   * @see https://accessibility.18f.gov/hidden-content/\n   */\n  region.style.position = \"absolute\";\n  region.style.width = \"1px\";\n  region.style.height = \"1px\";\n  region.style.margin = \"-1px\";\n  region.style.padding = \"0\";\n  region.style.border = \"0\";\n  region.style.overflow = \"hidden\";\n  region.style.clip = \"rect(0 0 0 0)\";\n\n  document.body.appendChild(region);\n  return region;\n};\n\nconst announceToScreenReader = announcement => {\n  if (hasDOM) {\n    const region = getLiveRegion();\n    region.textContent = announcement;\n  }\n};\n\nconst defaultMessages = {\n  searchResults: ({ start, end, totalResults, searchTerm }) => {\n    let message = `Showing ${start} to ${end} results out of ${totalResults}`;\n    if (searchTerm) message += `, searching for \"${searchTerm}\".`;\n    return message;\n  }\n};\n\nexport { getLiveRegion, announceToScreenReader, defaultMessages };\n"]},"metadata":{},"sourceType":"module"}