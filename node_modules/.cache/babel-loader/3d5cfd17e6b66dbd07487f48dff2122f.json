{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\nfunction wireUpEventHandler(handlerName, apiConnector, handlerParam) {\n  if (handlerParam) {\n    // Passes a 'next' parameter which allows a handler to work as\n    // middleware for a connector\n    if (apiConnector) {\n      var next = apiConnector[handlerName].bind(apiConnector);\n      return function () {\n        for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n          params[_key] = arguments[_key];\n        }\n\n        return handlerParam.apply(void 0, params.concat([next]));\n      };\n    }\n\n    return handlerParam;\n  }\n\n  if (apiConnector && apiConnector[handlerName]) return apiConnector[handlerName].bind(apiConnector);\n  return function () {\n    throw \"No \".concat(handlerName, \" handler provided and no Connector provided. You must configure one or the other.\");\n  };\n}\n/*\n * This class encapsulates the logic for Events. Events are events that occur\n * within Search UI that require integration with an external service to\n * either fetch / search for data, or notify analytics services of interesting\n * events that occur within a UI.\n *\n * Handlers for these events can either be passed directly, or by providing\n * an API Connector. The events that are passed directly can also be used\n * to override or proxy handlers provided by API Connectors.\n */\n\n\nvar Events = /*#__PURE__*/_createClass(function Events() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      apiConnector = _ref.apiConnector,\n      onSearch = _ref.onSearch,\n      onAutocomplete = _ref.onAutocomplete,\n      onResultClick = _ref.onResultClick,\n      onAutocompleteResultClick = _ref.onAutocompleteResultClick;\n\n  _classCallCheck(this, Events);\n\n  this.search = wireUpEventHandler(\"onSearch\", apiConnector, onSearch);\n  this.autocomplete = wireUpEventHandler(\"onAutocomplete\", apiConnector, onAutocomplete);\n  this.resultClick = wireUpEventHandler(\"onResultClick\", apiConnector, onResultClick);\n  this.autocompleteResultClick = wireUpEventHandler(\"onAutocompleteResultClick\", apiConnector, onAutocompleteResultClick);\n});\n\nexport { Events as default };","map":{"version":3,"mappings":";;;AAAA,SAASA,kBAAT,CAA4BC,WAA5B,EAAyCC,YAAzC,EAAuDC,YAAvD,EAAqE;AACnE,MAAIA,YAAJ,EAAkB;AAChB;AACA;AACA,QAAID,YAAJ,EAAkB;AAChB,UAAME,IAAI,GAAGF,YAAY,CAACD,WAAD,CAAZC,CAA0BG,IAA1BH,CAA+BA,YAA/BA,CAAb;AACA,aAAO,YAAe;AAAA,0CAAXI,MAAW;AAAXA,gBAAW,MAAXA,GAAWC,eAAXD;AAAW;;AACpB,eAAOH,YAAY,MAAZA,SAAgBG,MAAhB,OAAgBA,CAAhB,CAAwBF,IAAxB,CAAgBE,CAAhBH,CAAP;AADF;AAGD;;AACD,WAAOA,YAAP;AACD;;AACD,MAAID,YAAY,IAAIA,YAAY,CAACD,WAAD,CAAhC,EACE,OAAOC,YAAY,CAACD,WAAD,CAAZC,CAA0BG,IAA1BH,CAA+BA,YAA/BA,CAAP;AACF,SAAO,YAAM;AACX,uBAAYD,WAAZ;AADF;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACqBO,M,6BACnB,kBAMQ;AAAA,iFAAJ,EAAI;AAAA,MALNN,YAKM,QALNA,YAKM;AAAA,MAJNO,QAIM,QAJNA,QAIM;AAAA,MAHNC,cAGM,QAHNA,cAGM;AAAA,MAFNC,aAEM,QAFNA,aAEM;AAAA,MADNC,yBACM,QADNA,yBACM;;AAAAC;;AACN,OAAKC,MAAL,GAAcd,kBAAkB,CAAC,UAAD,EAAaE,YAAb,EAA2BO,QAA3B,CAAhC;AACA,OAAKM,YAAL,GAAoBf,kBAAkB,CACpC,gBADoC,EAEpCE,YAFoC,EAGpCQ,cAHoC,CAAtC;AAKA,OAAKM,WAAL,GAAmBhB,kBAAkB,CACnC,eADmC,EAEnCE,YAFmC,EAGnCS,aAHmC,CAArC;AAKA,OAAKM,uBAAL,GAA+BjB,kBAAkB,CAC/C,2BAD+C,EAE/CE,YAF+C,EAG/CU,yBAH+C,CAAjD;;;SAnBiBJ,M","names":["wireUpEventHandler","handlerName","apiConnector","handlerParam","next","bind","params","arguments","Events","onSearch","onAutocomplete","onResultClick","onAutocompleteResultClick","_classCallCheck","search","autocomplete","resultClick","autocompleteResultClick"],"sources":["/Users/karina/Main/Study/Web Dev/elasticsearch-test-api/node_modules/@elastic/search-ui/src/Events.js"],"sourcesContent":["function wireUpEventHandler(handlerName, apiConnector, handlerParam) {\n  if (handlerParam) {\n    // Passes a 'next' parameter which allows a handler to work as\n    // middleware for a connector\n    if (apiConnector) {\n      const next = apiConnector[handlerName].bind(apiConnector);\n      return (...params) => {\n        return handlerParam(...params, next);\n      };\n    }\n    return handlerParam;\n  }\n  if (apiConnector && apiConnector[handlerName])\n    return apiConnector[handlerName].bind(apiConnector);\n  return () => {\n    throw `No ${handlerName} handler provided and no Connector provided. You must configure one or the other.`;\n  };\n}\n\n/*\n * This class encapsulates the logic for Events. Events are events that occur\n * within Search UI that require integration with an external service to\n * either fetch / search for data, or notify analytics services of interesting\n * events that occur within a UI.\n *\n * Handlers for these events can either be passed directly, or by providing\n * an API Connector. The events that are passed directly can also be used\n * to override or proxy handlers provided by API Connectors.\n */\nexport default class Events {\n  constructor({\n    apiConnector,\n    onSearch,\n    onAutocomplete,\n    onResultClick,\n    onAutocompleteResultClick\n  } = {}) {\n    this.search = wireUpEventHandler(\"onSearch\", apiConnector, onSearch);\n    this.autocomplete = wireUpEventHandler(\n      \"onAutocomplete\",\n      apiConnector,\n      onAutocomplete\n    );\n    this.resultClick = wireUpEventHandler(\n      \"onResultClick\",\n      apiConnector,\n      onResultClick\n    );\n    this.autocompleteResultClick = wireUpEventHandler(\n      \"onAutocompleteResultClick\",\n      apiConnector,\n      onAutocompleteResultClick\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}