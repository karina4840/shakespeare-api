{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"facets\", \"filters\"],\n    _excluded2 = [\"searchKey\", \"engineName\", \"hostIdentifier\", \"beforeSearchCall\", \"beforeAutocompleteResultsCall\", \"beforeAutocompleteSuggestionsCall\", \"endpointBase\"],\n    _excluded3 = [\"current\", \"filters\", \"resultsPerPage\", \"sortDirection\", \"sortField\", \"sortList\"],\n    _excluded4 = [\"query\"],\n    _excluded5 = [\"current\", \"filters\", \"resultsPerPage\", \"sortDirection\", \"sortField\", \"sortList\"],\n    _excluded6 = [\"query\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport * as ElasticAppSearch from \"@elastic/app-search-javascript\";\nimport { adaptResponse } from \"./responseAdapter\";\nimport { adaptRequest } from \"./requestAdapters\";\nimport buildResponseAdapterOptions from \"./buildResponseAdapterOptions\"; // The API will error out if empty facets or filters objects\n// are sent.\n\nfunction removeEmptyFacetsAndFilters(options) {\n  var facets = options.facets,\n      filters = options.filters,\n      rest = _objectWithoutProperties(options, _excluded);\n\n  return _objectSpread(_objectSpread(_objectSpread({}, facets && Object.entries(facets).length > 0 && {\n    facets: facets\n  }), filters && Object.entries(filters).length > 0 && {\n    filters: filters\n  }), rest);\n}\n\nvar AppSearchAPIConnector = /*#__PURE__*/function () {\n  /**\n   * @callback next\n   * @param {Object} updatedQueryOptions The options to send to the API\n   */\n\n  /**\n   * @callback hook\n   * @param {Object} queryOptions The options that are about to be sent to the API\n   * @param {next} next The options that are about to be sent to the API\n   */\n\n  /**\n   * @typedef Options\n   * @param {string} searchKey Credential found in your App Search Dashboard\n   * @param {string} engineName Engine to query, found in your App Search Dashboard\n   * @param {string} hostIdentifier Credential found in your App Search Dashboard\n   *  Useful when proxying the Swiftype API or developing against a local API server.\n   * @param {hook} beforeSearchCall=(queryOptions,next)=>next(queryOptions) A hook to amend query options before the request is sent to the\n   *   API in a query on an \"onSearch\" event.\n   * @param {hook} beforeAutocompleteResultsCall=(queryOptions,next)=>next(queryOptions) A hook to amend query options before the request is sent to the\n   *   API in a \"results\" query on an \"onAutocomplete\" event.\n   * @param {hook} beforeAutocompleteSuggestionsCall=(queryOptions,next)=>next(queryOptions) A hook to amend query options before the request is sent to\n   * the API in a \"suggestions\" query on an \"onAutocomplete\" event.\n   * @param {string} endpointBase=\"\" Overrides the base of the Swiftype API endpoint completely.\n   */\n\n  /**\n   * @param {Options} options\n   */\n  function AppSearchAPIConnector(_ref) {\n    var searchKey = _ref.searchKey,\n        engineName = _ref.engineName,\n        hostIdentifier = _ref.hostIdentifier,\n        _ref$beforeSearchCall = _ref.beforeSearchCall,\n        beforeSearchCall = _ref$beforeSearchCall === void 0 ? function (queryOptions, next) {\n      return next(queryOptions);\n    } : _ref$beforeSearchCall,\n        _ref$beforeAutocomple = _ref.beforeAutocompleteResultsCall,\n        beforeAutocompleteResultsCall = _ref$beforeAutocomple === void 0 ? function (queryOptions, next) {\n      return next(queryOptions);\n    } : _ref$beforeAutocomple,\n        _ref$beforeAutocomple2 = _ref.beforeAutocompleteSuggestionsCall,\n        beforeAutocompleteSuggestionsCall = _ref$beforeAutocomple2 === void 0 ? function (queryOptions, next) {\n      return next(queryOptions);\n    } : _ref$beforeAutocomple2,\n        _ref$endpointBase = _ref.endpointBase,\n        endpointBase = _ref$endpointBase === void 0 ? \"\" : _ref$endpointBase,\n        rest = _objectWithoutProperties(_ref, _excluded2);\n\n    _classCallCheck(this, AppSearchAPIConnector);\n\n    if (!engineName || !(hostIdentifier || endpointBase)) {\n      throw Error(\"hostIdentifier or endpointBase, and engineName are required\");\n    }\n\n    this.client = ElasticAppSearch.createClient(_objectSpread(_objectSpread(_objectSpread({}, endpointBase && {\n      endpointBase: endpointBase\n    }), hostIdentifier && {\n      hostIdentifier: hostIdentifier\n    }), {}, {\n      apiKey: searchKey,\n      engineName: engineName\n    }, rest));\n    this.beforeSearchCall = beforeSearchCall;\n    this.beforeAutocompleteResultsCall = beforeAutocompleteResultsCall;\n    this.beforeAutocompleteSuggestionsCall = beforeAutocompleteSuggestionsCall;\n  }\n\n  _createClass(AppSearchAPIConnector, [{\n    key: \"onResultClick\",\n    value: function onResultClick(_ref2) {\n      var query = _ref2.query,\n          documentId = _ref2.documentId,\n          requestId = _ref2.requestId,\n          _ref2$tags = _ref2.tags,\n          tags = _ref2$tags === void 0 ? [] : _ref2$tags;\n      tags = tags.concat(\"results\");\n      return this.client.click({\n        query: query,\n        documentId: documentId,\n        requestId: requestId,\n        tags: tags\n      });\n    }\n  }, {\n    key: \"onAutocompleteResultClick\",\n    value: function onAutocompleteResultClick(_ref3) {\n      var query = _ref3.query,\n          documentId = _ref3.documentId,\n          requestId = _ref3.requestId,\n          _ref3$tags = _ref3.tags,\n          tags = _ref3$tags === void 0 ? [] : _ref3$tags;\n      tags = tags.concat(\"autocomplete\");\n      return this.client.click({\n        query: query,\n        documentId: documentId,\n        requestId: requestId,\n        tags: tags\n      });\n    }\n  }, {\n    key: \"onSearch\",\n    value: function () {\n      var _onSearch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(state, queryConfig) {\n        var _this = this;\n\n        var current, filters, resultsPerPage, sortDirection, sortField, sortList, restOfQueryConfig, _adaptRequest, query, optionsFromState, withQueryConfigOptions, options;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                current = queryConfig.current, filters = queryConfig.filters, resultsPerPage = queryConfig.resultsPerPage, sortDirection = queryConfig.sortDirection, sortField = queryConfig.sortField, sortList = queryConfig.sortList, restOfQueryConfig = _objectWithoutProperties(queryConfig, _excluded3);\n                _adaptRequest = adaptRequest(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, state), current !== undefined && {\n                  current: current\n                }), filters !== undefined && {\n                  filters: filters\n                }), resultsPerPage !== undefined && {\n                  resultsPerPage: resultsPerPage\n                }), sortDirection !== undefined && {\n                  sortDirection: sortDirection\n                }), sortField !== undefined && {\n                  sortField: sortField\n                }), sortList !== undefined && {\n                  sortList: sortList\n                })), query = _adaptRequest.query, optionsFromState = _objectWithoutProperties(_adaptRequest, _excluded4);\n                withQueryConfigOptions = _objectSpread(_objectSpread({}, restOfQueryConfig), optionsFromState);\n                options = _objectSpread({}, removeEmptyFacetsAndFilters(withQueryConfigOptions));\n                return _context2.abrupt(\"return\", this.beforeSearchCall(options, /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newOptions) {\n                    var response;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return _this.client.search(query, newOptions);\n\n                          case 2:\n                            response = _context.sent;\n                            return _context.abrupt(\"return\", adaptResponse(response, buildResponseAdapterOptions(queryConfig)));\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x3) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }()));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function onSearch(_x, _x2) {\n        return _onSearch.apply(this, arguments);\n      }\n\n      return onSearch;\n    }()\n  }, {\n    key: \"onAutocomplete\",\n    value: function () {\n      var _onAutocomplete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref5, queryConfig) {\n        var _this2 = this;\n\n        var searchTerm, autocompletedState, promises, _queryConfig$results, current, filters, resultsPerPage, sortDirection, sortField, sortList, restOfQueryConfig, _adaptRequest2, query, optionsFromState, withQueryConfigOptions, options, _options;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                searchTerm = _ref5.searchTerm;\n                autocompletedState = {};\n                promises = [];\n\n                if (queryConfig.results) {\n                  _queryConfig$results = queryConfig.results, current = _queryConfig$results.current, filters = _queryConfig$results.filters, resultsPerPage = _queryConfig$results.resultsPerPage, sortDirection = _queryConfig$results.sortDirection, sortField = _queryConfig$results.sortField, sortList = _queryConfig$results.sortList, restOfQueryConfig = _objectWithoutProperties(_queryConfig$results, _excluded5);\n                  _adaptRequest2 = adaptRequest({\n                    current: current,\n                    searchTerm: searchTerm,\n                    filters: filters,\n                    resultsPerPage: resultsPerPage,\n                    sortDirection: sortDirection,\n                    sortField: sortField,\n                    sortList: sortList\n                  }), query = _adaptRequest2.query, optionsFromState = _objectWithoutProperties(_adaptRequest2, _excluded6);\n                  withQueryConfigOptions = _objectSpread(_objectSpread({}, restOfQueryConfig), optionsFromState);\n                  options = removeEmptyFacetsAndFilters(withQueryConfigOptions);\n                  promises.push(this.beforeAutocompleteResultsCall(options, function (newOptions) {\n                    return _this2.client.search(query, newOptions).then(function (response) {\n                      autocompletedState.autocompletedResults = adaptResponse(response).results;\n                      autocompletedState.autocompletedResultsRequestId = response.info.meta.request_id;\n                    });\n                  }));\n                }\n\n                if (queryConfig.suggestions) {\n                  _options = queryConfig.suggestions;\n                  promises.push(this.beforeAutocompleteSuggestionsCall(_options, function (newOptions) {\n                    return _this2.client.querySuggestion(searchTerm, newOptions).then(function (response) {\n                      autocompletedState.autocompletedSuggestions = response.results;\n                      autocompletedState.autocompletedSuggestionsRequestId = response.meta.request_id;\n                    });\n                  }));\n                }\n\n                _context3.next = 7;\n                return Promise.all(promises);\n\n              case 7:\n                return _context3.abrupt(\"return\", autocompletedState);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function onAutocomplete(_x4, _x5) {\n        return _onAutocomplete.apply(this, arguments);\n      }\n\n      return onAutocomplete;\n    }()\n  }]);\n\n  return AppSearchAPIConnector;\n}();\n\nexport default AppSearchAPIConnector;","map":{"version":3,"mappings":"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","names":["ElasticAppSearch","adaptResponse","adaptRequest","buildResponseAdapterOptions","removeEmptyFacetsAndFilters","options","facets","filters","rest","Object","entries","length","AppSearchAPIConnector","searchKey","engineName","hostIdentifier","beforeSearchCall","queryOptions","next","beforeAutocompleteResultsCall","beforeAutocompleteSuggestionsCall","endpointBase","_classCallCheck","Error","client","createClient","apiKey","query","documentId","requestId","tags","concat","click","state","queryConfig","current","resultsPerPage","sortDirection","sortField","sortList","restOfQueryConfig","_adaptRequest","undefined","optionsFromState","withQueryConfigOptions","newOptions","_context","_this","search","response","searchTerm","autocompletedState","promises","results","_queryConfig$results","_adaptRequest2","push","_this2","then","autocompletedResults","autocompletedResultsRequestId","info","meta","request_id","suggestions","querySuggestion","autocompletedSuggestions","autocompletedSuggestionsRequestId","_context3","Promise","all"],"sources":["/Users/karina/Main/Study/Web Dev/elasticsearch-api-test/node_modules/@elastic/search-ui-app-search-connector/src/AppSearchAPIConnector.js"],"sourcesContent":["import * as ElasticAppSearch from \"@elastic/app-search-javascript\";\n\nimport { adaptResponse } from \"./responseAdapter\";\nimport { adaptRequest } from \"./requestAdapters\";\nimport buildResponseAdapterOptions from \"./buildResponseAdapterOptions\";\n\n// The API will error out if empty facets or filters objects\n// are sent.\nfunction removeEmptyFacetsAndFilters(options) {\n  const { facets, filters, ...rest } = options;\n  return {\n    ...(facets && Object.entries(facets).length > 0 && { facets }),\n    ...(filters && Object.entries(filters).length > 0 && { filters }),\n    ...rest\n  };\n}\nclass AppSearchAPIConnector {\n  /**\n   * @callback next\n   * @param {Object} updatedQueryOptions The options to send to the API\n   */\n\n  /**\n   * @callback hook\n   * @param {Object} queryOptions The options that are about to be sent to the API\n   * @param {next} next The options that are about to be sent to the API\n   */\n\n  /**\n   * @typedef Options\n   * @param {string} searchKey Credential found in your App Search Dashboard\n   * @param {string} engineName Engine to query, found in your App Search Dashboard\n   * @param {string} hostIdentifier Credential found in your App Search Dashboard\n   *  Useful when proxying the Swiftype API or developing against a local API server.\n   * @param {hook} beforeSearchCall=(queryOptions,next)=>next(queryOptions) A hook to amend query options before the request is sent to the\n   *   API in a query on an \"onSearch\" event.\n   * @param {hook} beforeAutocompleteResultsCall=(queryOptions,next)=>next(queryOptions) A hook to amend query options before the request is sent to the\n   *   API in a \"results\" query on an \"onAutocomplete\" event.\n   * @param {hook} beforeAutocompleteSuggestionsCall=(queryOptions,next)=>next(queryOptions) A hook to amend query options before the request is sent to\n   * the API in a \"suggestions\" query on an \"onAutocomplete\" event.\n   * @param {string} endpointBase=\"\" Overrides the base of the Swiftype API endpoint completely.\n   */\n\n  /**\n   * @param {Options} options\n   */\n  constructor({\n    searchKey,\n    engineName,\n    hostIdentifier,\n    beforeSearchCall = (queryOptions, next) => next(queryOptions),\n    beforeAutocompleteResultsCall = (queryOptions, next) => next(queryOptions),\n    beforeAutocompleteSuggestionsCall = (queryOptions, next) =>\n      next(queryOptions),\n    endpointBase = \"\",\n    ...rest\n  }) {\n    if (!engineName || !(hostIdentifier || endpointBase)) {\n      throw Error(\n        \"hostIdentifier or endpointBase, and engineName are required\"\n      );\n    }\n\n    this.client = ElasticAppSearch.createClient({\n      ...(endpointBase && { endpointBase }), //Add property on condition\n      ...(hostIdentifier && { hostIdentifier: hostIdentifier }),\n      apiKey: searchKey,\n      engineName: engineName,\n      ...rest\n    });\n    this.beforeSearchCall = beforeSearchCall;\n    this.beforeAutocompleteResultsCall = beforeAutocompleteResultsCall;\n    this.beforeAutocompleteSuggestionsCall = beforeAutocompleteSuggestionsCall;\n  }\n\n  onResultClick({ query, documentId, requestId, tags = [] }) {\n    tags = tags.concat(\"results\");\n    return this.client.click({ query, documentId, requestId, tags });\n  }\n\n  onAutocompleteResultClick({ query, documentId, requestId, tags = [] }) {\n    tags = tags.concat(\"autocomplete\");\n    return this.client.click({ query, documentId, requestId, tags });\n  }\n\n  async onSearch(state, queryConfig) {\n    const {\n      current,\n      filters,\n      resultsPerPage,\n      sortDirection,\n      sortField,\n      sortList,\n      ...restOfQueryConfig\n    } = queryConfig;\n\n    const { query, ...optionsFromState } = adaptRequest({\n      ...state,\n      ...(current !== undefined && { current }),\n      ...(filters !== undefined && { filters }),\n      ...(resultsPerPage !== undefined && { resultsPerPage }),\n      ...(sortDirection !== undefined && { sortDirection }),\n      ...(sortField !== undefined && { sortField }),\n      ...(sortList !== undefined && { sortList })\n    });\n\n    const withQueryConfigOptions = {\n      ...restOfQueryConfig,\n      ...optionsFromState\n    };\n    const options = {\n      ...removeEmptyFacetsAndFilters(withQueryConfigOptions)\n    };\n\n    return this.beforeSearchCall(options, async newOptions => {\n      const response = await this.client.search(query, newOptions);\n      return adaptResponse(response, buildResponseAdapterOptions(queryConfig));\n    });\n  }\n\n  async onAutocomplete({ searchTerm }, queryConfig) {\n    const autocompletedState = {};\n    let promises = [];\n\n    if (queryConfig.results) {\n      const {\n        current,\n        filters,\n        resultsPerPage,\n        sortDirection,\n        sortField,\n        sortList,\n        ...restOfQueryConfig\n      } = queryConfig.results;\n\n      const { query, ...optionsFromState } = adaptRequest({\n        current,\n        searchTerm,\n        filters,\n        resultsPerPage,\n        sortDirection,\n        sortField,\n        sortList\n      });\n\n      const withQueryConfigOptions = {\n        ...restOfQueryConfig,\n        ...optionsFromState\n      };\n      const options = removeEmptyFacetsAndFilters(withQueryConfigOptions);\n      promises.push(\n        this.beforeAutocompleteResultsCall(options, newOptions => {\n          return this.client.search(query, newOptions).then(response => {\n            autocompletedState.autocompletedResults = adaptResponse(\n              response\n            ).results;\n            autocompletedState.autocompletedResultsRequestId =\n              response.info.meta.request_id;\n          });\n        })\n      );\n    }\n\n    if (queryConfig.suggestions) {\n      const options = queryConfig.suggestions;\n\n      promises.push(\n        this.beforeAutocompleteSuggestionsCall(options, newOptions =>\n          this.client.querySuggestion(searchTerm, newOptions).then(response => {\n            autocompletedState.autocompletedSuggestions = response.results;\n            autocompletedState.autocompletedSuggestionsRequestId =\n              response.meta.request_id;\n          })\n        )\n      );\n    }\n\n    await Promise.all(promises);\n    return autocompletedState;\n  }\n}\n\nexport default AppSearchAPIConnector;\n"]},"metadata":{},"sourceType":"module"}