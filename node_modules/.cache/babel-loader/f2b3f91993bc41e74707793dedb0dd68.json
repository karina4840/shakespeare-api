{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"className\", \"result\", \"onClickLink\", \"titleField\", \"urlField\", \"thumbnailField\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { appendClassName, getUrlSanitizer } from \"./view-helpers\";\nimport { isFieldValueWrapper } from \"./types/FieldValueWrapper\";\n\nfunction getFieldType(result, field, type) {\n  if (result[field]) return result[field][type];\n}\n\nfunction getRaw(result, field) {\n  return getFieldType(result, field, \"raw\");\n}\n\nfunction getSnippet(result, field) {\n  return getFieldType(result, field, \"snippet\");\n}\n\nfunction htmlEscape(str) {\n  if (!str) return \"\";\n  return String(str).replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n\nfunction getEscapedField(result, field) {\n  // Fallback to raw values here, because non-string fields\n  // will not have a snippet fallback. Raw values MUST be html escaped.\n  var safeField = getSnippet(result, field) || htmlEscape(getRaw(result, field));\n  return Array.isArray(safeField) ? safeField.join(\", \") : safeField;\n}\n\nfunction getEscapedFields(result) {\n  return Object.keys(result).reduce(function (acc, field) {\n    // If we receive an arbitrary value from the response, we may not properly\n    // handle it, so we should filter out arbitrary values here.\n    //\n    // I.e.,\n    // Arbitrary value: \"_metaField: '1939191'\"\n    // vs.\n    // FieldValueWrapper: \"_metaField: {raw: '1939191'}\"\n    if (!isFieldValueWrapper(result[field])) return acc;\n    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, field, getEscapedField(result, field)));\n  }, {});\n}\n\nfunction Result(_ref) {\n  var className = _ref.className,\n      result = _ref.result,\n      onClickLink = _ref.onClickLink,\n      titleField = _ref.titleField,\n      urlField = _ref.urlField,\n      thumbnailField = _ref.thumbnailField,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var fields = getEscapedFields(result);\n  var title = getEscapedField(result, titleField);\n  var url = getUrlSanitizer(URL, location)(getRaw(result, urlField));\n  var thumbnail = getUrlSanitizer(URL, location)(getRaw(result, thumbnailField));\n  return /*#__PURE__*/React.createElement(\"li\", _extends({\n    className: appendClassName(\"sui-result\", className)\n  }, rest), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sui-result__header\"\n  }, title && !url && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sui-result__title\",\n    dangerouslySetInnerHTML: {\n      __html: title\n    }\n  }), title && url && /*#__PURE__*/React.createElement(\"a\", {\n    className: \"sui-result__title sui-result__title-link\",\n    dangerouslySetInnerHTML: {\n      __html: title\n    },\n    href: url,\n    onClick: onClickLink,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sui-result__body\"\n  }, thumbnail && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sui-result__image\"\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: thumbnail,\n    alt: \"\"\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"sui-result__details\"\n  }, Object.entries(fields).map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        fieldName = _ref3[0],\n        fieldValue = _ref3[1];\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: fieldName\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sui-result__key\"\n    }, fieldName), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sui-result__value\",\n      dangerouslySetInnerHTML: {\n        __html: fieldValue\n      }\n    }));\n  }))));\n}\n\nResult.propTypes = {\n  result: PropTypes.object.isRequired,\n  onClickLink: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  titleField: PropTypes.string,\n  urlField: PropTypes.string,\n  thumbnailField: PropTypes.string\n};\nexport default Result;","map":{"version":3,"mappings":"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","names":["PropTypes","React","appendClassName","getUrlSanitizer","isFieldValueWrapper","getFieldType","result","field","type","getRaw","getSnippet","htmlEscape","str","String","replace","getEscapedField","safeField","Array","isArray","join","getEscapedFields","Object","keys","reduce","acc","Result","className","onClickLink","titleField","urlField","thumbnailField","rest","fields","title","url","URL","location","thumbnail","dangerouslySetInnerHTML","__html","href","onClick","target","rel","src","alt","entries","map","fieldName","fieldValue","key","propTypes","object","isRequired","func","string"],"sources":["/Users/karina/Main/Study/Web Dev/test-api/node_modules/@elastic/react-search-ui-views/src/Result.js"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport { appendClassName, getUrlSanitizer } from \"./view-helpers\";\nimport { isFieldValueWrapper } from \"./types/FieldValueWrapper\";\n\nfunction getFieldType(result, field, type) {\n  if (result[field]) return result[field][type];\n}\n\nfunction getRaw(result, field) {\n  return getFieldType(result, field, \"raw\");\n}\n\nfunction getSnippet(result, field) {\n  return getFieldType(result, field, \"snippet\");\n}\n\nfunction htmlEscape(str) {\n  if (!str) return \"\";\n\n  return String(str)\n    .replace(/&/g, \"&amp;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#39;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\");\n}\n\nfunction getEscapedField(result, field) {\n  // Fallback to raw values here, because non-string fields\n  // will not have a snippet fallback. Raw values MUST be html escaped.\n  const safeField =\n    getSnippet(result, field) || htmlEscape(getRaw(result, field));\n  return Array.isArray(safeField) ? safeField.join(\", \") : safeField;\n}\n\nfunction getEscapedFields(result) {\n  return Object.keys(result).reduce((acc, field) => {\n    // If we receive an arbitrary value from the response, we may not properly\n    // handle it, so we should filter out arbitrary values here.\n    //\n    // I.e.,\n    // Arbitrary value: \"_metaField: '1939191'\"\n    // vs.\n    // FieldValueWrapper: \"_metaField: {raw: '1939191'}\"\n    if (!isFieldValueWrapper(result[field])) return acc;\n    return { ...acc, [field]: getEscapedField(result, field) };\n  }, {});\n}\n\nfunction Result({\n  className,\n  result,\n  onClickLink,\n  titleField,\n  urlField,\n  thumbnailField,\n  ...rest\n}) {\n  const fields = getEscapedFields(result);\n  const title = getEscapedField(result, titleField);\n  const url = getUrlSanitizer(URL, location)(getRaw(result, urlField));\n  const thumbnail = getUrlSanitizer(URL, location)(\n    getRaw(result, thumbnailField)\n  );\n\n  return (\n    <li className={appendClassName(\"sui-result\", className)} {...rest}>\n      <div className=\"sui-result__header\">\n        {title && !url && (\n          <span\n            className=\"sui-result__title\"\n            dangerouslySetInnerHTML={{ __html: title }}\n          />\n        )}\n        {title && url && (\n          <a\n            className=\"sui-result__title sui-result__title-link\"\n            dangerouslySetInnerHTML={{ __html: title }}\n            href={url}\n            onClick={onClickLink}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          />\n        )}\n      </div>\n\n      <div className=\"sui-result__body\">\n        {thumbnail && (\n          <div className=\"sui-result__image\">\n            <img src={thumbnail} alt=\"\" />\n          </div>\n        )}\n        <ul className=\"sui-result__details\">\n          {Object.entries(fields).map(([fieldName, fieldValue]) => (\n            <li key={fieldName}>\n              <span className=\"sui-result__key\">{fieldName}</span>{\" \"}\n              <span\n                className=\"sui-result__value\"\n                dangerouslySetInnerHTML={{ __html: fieldValue }}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n\nResult.propTypes = {\n  result: PropTypes.object.isRequired,\n  onClickLink: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  titleField: PropTypes.string,\n  urlField: PropTypes.string,\n  thumbnailField: PropTypes.string\n};\n\nexport default Result;\n"]},"metadata":{},"sourceType":"module"}