{"ast":null,"code":"var _jsxFileName = \"/Users/karina/Main/Study/Web Dev/fix-api-test/src/Components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CardList from \"./CardList\";\nimport SearchBox from './SearchBox';\nimport Loading from \"./Loading\";\nimport Pagination from './Pagination';\nimport NoResults from \"./NoResults\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // ============ setting the initial states for items and search ============\n  const [items, setItems] = useState([]);\n  const [search, setSearch] = useState(\"\"); // ============ fetching the data from API and store values ============\n\n  useEffect(() => {\n    fetchItems();\n  }, []);\n\n  const fetchItems = async () => {\n    const data = await fetch('http://cosmic-elastic.eu.ngrok.io/shakespeare/_search?size=100');\n    const itemsObj = await data.json();\n    const items = itemsObj.hits.hits; // ============ store just fetched items in an array ============\n\n    setItems(items);\n  }; // ============ filtering the plays according to the input ============\n\n\n  const filteredPlays = items.filter(play => {\n    return play._source.text_entry.toLowerCase().includes(search.toLowerCase());\n  }); // ============ pagination ============\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = filteredPlays.slice(indexOfFirstPost, indexOfLastPost);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber); // ============ rendering the App ============ \n\n\n  let noItems = !items.length;\n  let noPlays = !filteredPlays.length; // !filteredPlays.length && <NoResults />\n\n  return noItems ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 22\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"heading\",\n      children: \"Shakespeare Work Library\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-body\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBox, {\n        searchChange: event => setSearch(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), noPlays ? /*#__PURE__*/_jsxDEV(NoResults, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 32\n      }, this) : /*#__PURE__*/_jsxDEV(CardList, {\n        plays: currentPosts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 48\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        postsPerPage: postsPerPage,\n        totalPosts: filteredPlays.length,\n        paginate: paginate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 13\n  }, this);\n}\n\n_s(App, \"bqllhXPerTDwyuNOLDJ5xpiMpQk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/karina/Main/Study/Web Dev/fix-api-test/src/Components/App.jsx"],"names":["React","useState","useEffect","CardList","SearchBox","Loading","Pagination","NoResults","App","items","setItems","search","setSearch","fetchItems","data","fetch","itemsObj","json","hits","filteredPlays","filter","play","_source","text_entry","toLowerCase","includes","currentPage","setCurrentPage","postsPerPage","indexOfLastPost","indexOfFirstPost","currentPosts","slice","paginate","pageNumber","noItems","length","noPlays","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEf;AACI,QAAM,CAACC,KAAD,EACFC,QADE,IACUT,QAAQ,CAAC,EAAD,CADxB;AAEA,QAAM,CAACU,MAAD,EACFC,SADE,IACWX,QAAQ,CAAC,EAAD,CADzB,CALW,CAQf;;AACIC,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,UAAU,GAAG,YAAW;AAC1B,UAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,gEAAD,CAAxB;AACA,UAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACG,IAAL,EAAvB;AACA,UAAMR,KAAK,GAAGO,QAAQ,CAACE,IAAT,CAAcA,IAA5B,CAH0B,CAMlC;;AACQR,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,GARD,CAbW,CAuBf;;;AACI,QAAMU,aAAa,GAAGV,KAAK,CAACW,MAAN,CAAcC,IAAD,IAAU;AACzC,WAAOA,IAAI,CACNC,OADE,CAEFC,UAFE,CAGFC,WAHE,GAIFC,QAJE,CAIOd,MAAM,CAACa,WAAP,EAJP,CAAP;AAKH,GANqB,CAAtB,CAxBW,CAgCf;;AACI,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgC1B,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAAC2B,YAAD,IAAiB3B,QAAQ,CAAC,EAAD,CAA/B;AAEA,QAAM4B,eAAe,GAAGH,WAAW,GAAGE,YAAtC;AACA,QAAME,gBAAgB,GAAGD,eAAe,GAAGD,YAA3C;AACA,QAAMG,YAAY,GAAGZ,aAAa,CAACa,KAAd,CAAoBF,gBAApB,EAAsCD,eAAtC,CAArB;;AAEA,QAAMI,QAAQ,GAAGC,UAAU,IAAIP,cAAc,CAACO,UAAD,CAA7C,CAxCW,CA0Cf;;;AACI,MAAIC,OAAO,GAAG,CAAC1B,KAAK,CAAC2B,MAArB;AACA,MAAIC,OAAO,GAAG,CAAClB,aAAa,CAACiB,MAA7B,CA5CW,CA6Cf;;AAGI,SAAOD,OAAO,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAH,gBAEN;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BAEI,QAAC,SAAD;AAAW,QAAA,YAAY,EAAGG,KAAD,IAAW1B,SAAS,CAAC0B,KAAK,CAACC,MAAN,CAAaC,KAAd;AAA7C;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGKH,OAAO,gBAAG,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAmB,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEN;AAAjB;AAAA;AAAA;AAAA;AAAA,cAH/B,eAMI,QAAC,UAAD;AACI,QAAA,YAAY,EAAEH,YADlB;AAEI,QAAA,UAAU,EAAET,aAAa,CAACiB,MAF9B;AAGI,QAAA,QAAQ,EAAEH;AAHd;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFR;AAiBH;;GAjEQzB,G;;KAAAA,G;AAmET,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport CardList from \"./CardList\";\nimport SearchBox from './SearchBox';\nimport Loading from \"./Loading\";\nimport Pagination from './Pagination';\nimport NoResults from \"./NoResults\";\n\nfunction App() {\n\n// ============ setting the initial states for items and search ============\n    const [items,\n        setItems] = useState([]);\n    const [search,\n        setSearch] = useState(\"\");\n\n// ============ fetching the data from API and store values ============\n    useEffect(() => {\n        fetchItems()\n    }, []);\n\n    const fetchItems = async() => {\n        const data = await fetch('http://cosmic-elastic.eu.ngrok.io/shakespeare/_search?size=100');\n        const itemsObj = await data.json();\n        const items = itemsObj.hits.hits;\n\n\n// ============ store just fetched items in an array ============\n        setItems(items);\n    }\n\n// ============ filtering the plays according to the input ============\n    const filteredPlays = items.filter((play) => {\n        return play\n            ._source\n            .text_entry\n            .toLowerCase()\n            .includes(search.toLowerCase());\n    });\n\n// ============ pagination ============\n    const [currentPage, setCurrentPage] = useState(1);\n    const [postsPerPage] = useState(10);\n\n    const indexOfLastPost = currentPage * postsPerPage;\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\n    const currentPosts = filteredPlays.slice(indexOfFirstPost, indexOfLastPost);\n\n    const paginate = pageNumber => setCurrentPage(pageNumber);\n\n// ============ rendering the App ============ \n    let noItems = !items.length;\n    let noPlays = !filteredPlays.length;\n// !filteredPlays.length && <NoResults />\n\n\n    return noItems ? <Loading/> : (\n        \n            <div className=\"App\">\n                <h1 className=\"heading\">Shakespeare Work Library</h1>\n                <div className=\"app-body\">\n\n                    <SearchBox searchChange={(event) => setSearch(event.target.value)}/> \n                    {noPlays ? <NoResults /> : <CardList plays={currentPosts}/> }\n                \n\n                    <Pagination\n                        postsPerPage={postsPerPage}\n                        totalPosts={filteredPlays.length}\n                        paginate={paginate}/>\n                </div>\n            </div>\n        );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}